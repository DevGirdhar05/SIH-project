{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nCivicConnect is a crowdsourced civic issue reporting and resolution system designed for citizens to report civic issues (potholes, streetlights, garbage, etc.) and for authorities to manage and resolve them. The platform consists of a React-based web application for both citizens and administrators, with a Node.js/Express backend providing REST APIs.\n\nThe system enables citizens to report issues with photos, GPS coordinates, and descriptions, while providing authorities with comprehensive dashboards for triaging, assigning, and tracking issue resolution. It includes features like status tracking, priority scoring, user management, and analytics dashboards.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development\n- **UI Library**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Authentication**: JWT-based authentication with refresh tokens stored in localStorage\n- **Form Handling**: React Hook Form with Zod validation\n\n## Backend Architecture  \n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety\n- **Database ORM**: Drizzle ORM with PostgreSQL database\n- **Database Provider**: Neon serverless PostgreSQL\n- **File Uploads**: Multer for handling multipart/form-data with local storage\n- **Authentication**: JWT tokens with bcrypt for password hashing\n- **Validation**: Zod schemas for request/response validation\n- **Geolocation**: Mapbox/Google Maps integration for reverse geocoding\n\n## Database Design\n- **Users**: Role-based access (CITIZEN, OFFICER, SUPERVISOR, ADMIN) with ward assignments\n- **Issues**: Complete lifecycle tracking with status enum (DRAFT → SUBMITTED → TRIAGED → ASSIGNED → IN_PROGRESS → PENDING_USER_INFO → RESOLVED → REJECTED)\n- **Categories**: Departmental issue categorization with SLA configuration\n- **Geographic Data**: Ward and department management with PostGIS support\n- **Audit Trail**: Issue events, comments, and status changes tracking\n\n## Authentication & Authorization\n- **JWT Implementation**: Access tokens (15min) + refresh tokens (7d) \n- **Role-Based Access Control**: Different permissions for citizens vs. administrative users\n- **Session Management**: Automatic token refresh with fallback to login\n- **Security**: Password hashing with bcrypt, input validation with Zod\n\n## File Management\n- **Upload Strategy**: Local file system storage with configurable upload directory\n- **File Validation**: Type checking (images only) and size limits (10MB)\n- **Future-Ready**: Abstracted file service ready for S3/CDN integration\n\n# External Dependencies\n\n## Database & Storage\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database queries with schema migrations\n- **Local File Storage**: Current implementation with plans for cloud storage migration\n\n## UI & Styling\n- **Radix UI**: Accessible component primitives for forms, dialogs, and navigation\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide Icons**: Consistent iconography throughout the application\n\n## Maps & Geolocation\n- **Mapbox/Google Maps**: Configurable geocoding service abstraction\n- **Browser Geolocation API**: GPS coordinates capture for issue reporting\n\n## Development Tools\n- **Vite**: Fast development server and build tool\n- **TypeScript**: Static type checking across frontend and backend\n- **Replit Integration**: Development environment with runtime error handling\n\n## Authentication Services\n- **JWT**: Self-contained token-based authentication\n- **bcryptjs**: Password hashing and verification\n- **Future SMS Integration**: Placeholder for OTP-based authentication","size_bytes":3979},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2836},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/seed.ts":{"content":"import { db } from \"../server/db\";\nimport { departments, wards, categories, users } from \"../shared/schema\";\nimport { authService } from \"../server/services/auth\";\n\nasync function seed() {\n  console.log(\"Starting database seeding...\");\n\n  try {\n    // Create departments\n    const deptData = [\n      { name: \"Public Works\", code: \"PWD\", email: \"pwd@city.gov\", phone: \"+91-123-456-7890\" },\n      { name: \"Electricity Board\", code: \"EB\", email: \"electricity@city.gov\", phone: \"+91-123-456-7891\" },\n      { name: \"Water Department\", code: \"WD\", email: \"water@city.gov\", phone: \"+91-123-456-7892\" },\n      { name: \"Sanitation\", code: \"SAN\", email: \"sanitation@city.gov\", phone: \"+91-123-456-7893\" },\n      { name: \"Parks & Recreation\", code: \"PR\", email: \"parks@city.gov\", phone: \"+91-123-456-7894\" },\n    ];\n\n    const createdDepts = await db.insert(departments).values(deptData).returning();\n    console.log(`Created ${createdDepts.length} departments`);\n\n    // Create wards\n    const wardData = [\n      { name: \"Ward 1 - Central\", code: \"W001\" },\n      { name: \"Ward 2 - North\", code: \"W002\" },\n      { name: \"Ward 3 - South\", code: \"W003\" },\n      { name: \"Ward 4 - East\", code: \"W004\" },\n      { name: \"Ward 5 - West\", code: \"W005\" },\n      { name: \"Ward 6 - Industrial\", code: \"W006\" },\n      { name: \"Ward 7 - Residential\", code: \"W007\" },\n      { name: \"Ward 8 - Commercial\", code: \"W008\" },\n    ];\n\n    const createdWards = await db.insert(wards).values(wardData).returning();\n    console.log(`Created ${createdWards.length} wards`);\n\n    // Create categories\n    const categoryData = [\n      { name: \"Pothole\", code: \"pothole\", icon: \"🛣️\", slaHours: 168, priorityWeight: 3, departmentId: createdDepts[0].id }, // 7 days\n      { name: \"Street Light Out\", code: \"streetlight\", icon: \"💡\", slaHours: 72, priorityWeight: 2, departmentId: createdDepts[1].id }, // 3 days\n      { name: \"Garbage Overflow\", code: \"garbage\", icon: \"🗑️\", slaHours: 24, priorityWeight: 4, departmentId: createdDepts[3].id }, // 1 day\n      { name: \"Water Leakage\", code: \"water\", icon: \"💧\", slaHours: 48, priorityWeight: 5, departmentId: createdDepts[2].id }, // 2 days\n      { name: \"Traffic Light Issue\", code: \"traffic\", icon: \"🚦\", slaHours: 12, priorityWeight: 5, departmentId: createdDepts[0].id }, // 12 hours\n      { name: \"Tree Fall\", code: \"tree\", icon: \"🌳\", slaHours: 24, priorityWeight: 4, departmentId: createdDepts[4].id }, // 1 day\n      { name: \"Road Damage\", code: \"road\", icon: \"🛤️\", slaHours: 120, priorityWeight: 3, departmentId: createdDepts[0].id }, // 5 days\n      { name: \"Drainage Block\", code: \"drainage\", icon: \"🚰\", slaHours: 48, priorityWeight: 4, departmentId: createdDepts[3].id }, // 2 days\n      { name: \"Illegal Dumping\", code: \"dumping\", icon: \"🚫\", slaHours: 72, priorityWeight: 3, departmentId: createdDepts[3].id }, // 3 days\n      { name: \"Park Maintenance\", code: \"park\", icon: \"🌲\", slaHours: 168, priorityWeight: 2, departmentId: createdDepts[4].id }, // 7 days\n    ];\n\n    const createdCategories = await db.insert(categories).values(categoryData).returning();\n    console.log(`Created ${createdCategories.length} categories`);\n\n    // Create admin user\n    const adminPassword = await authService.hashPassword(\"admin123\");\n    const adminUser = {\n      name: \"Admin User\",\n      email: \"admin@civicconnect.com\",\n      password: adminPassword,\n      role: \"ADMIN\" as const,\n      phone: \"+91-987-654-3210\",\n      locale: \"en\",\n      isActive: true,\n    };\n\n    const createdAdmin = await db.insert(users).values(adminUser).returning();\n    console.log(`Created admin user: ${createdAdmin[0].email}`);\n\n    // Create some sample officers\n    const officerPassword = await authService.hashPassword(\"officer123\");\n    const officerData = [\n      {\n        name: \"John Smith\",\n        email: \"john.smith@city.gov\",\n        password: officerPassword,\n        role: \"OFFICER\" as const,\n        phone: \"+91-987-654-3211\",\n        wardId: createdWards[0].id,\n        locale: \"en\",\n        isActive: true,\n      },\n      {\n        name: \"Sarah Johnson\",\n        email: \"sarah.johnson@city.gov\", \n        password: officerPassword,\n        role: \"SUPERVISOR\" as const,\n        phone: \"+91-987-654-3212\",\n        wardId: createdWards[1].id,\n        locale: \"en\",\n        isActive: true,\n      },\n      {\n        name: \"Mike Wilson\",\n        email: \"mike.wilson@city.gov\",\n        password: officerPassword,\n        role: \"OFFICER\" as const,\n        phone: \"+91-987-654-3213\",\n        wardId: createdWards[2].id,\n        locale: \"en\",\n        isActive: true,\n      },\n    ];\n\n    const createdOfficers = await db.insert(users).values(officerData).returning();\n    console.log(`Created ${createdOfficers.length} officer users`);\n\n    // Create a sample citizen user\n    const citizenPassword = await authService.hashPassword(\"citizen123\");\n    const citizenUser = {\n      name: \"Jane Citizen\",\n      email: \"jane@example.com\",\n      password: citizenPassword,\n      role: \"CITIZEN\" as const,\n      phone: \"+91-987-654-3214\",\n      locale: \"en\",\n      isActive: true,\n    };\n\n    const createdCitizen = await db.insert(users).values(citizenUser).returning();\n    console.log(`Created citizen user: ${createdCitizen[0].email}`);\n\n    console.log(\"Database seeding completed successfully!\");\n    console.log(\"\\nDefault login credentials:\");\n    console.log(\"Admin: admin@civicconnect.com / admin123\");\n    console.log(\"Officer: john.smith@city.gov / officer123\");\n    console.log(\"Supervisor: sarah.johnson@city.gov / officer123\");\n    console.log(\"Citizen: jane@example.com / citizen123\");\n\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    process.exit(1);\n  }\n}\n\nseed().catch(console.error);","size_bytes":5759},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { webSocketService } from \"./services/websocket\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    // Initialize WebSocket server\n    webSocketService.init(server);\n  });\n})();\n","size_bytes":2193},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authService } from \"./services/auth\";\nimport { authMiddleware, requireRole } from \"./middleware/auth\";\nimport { fileUploadService } from \"./services/file-upload\";\nimport { geolocationService } from \"./services/geolocation\";\nimport { webSocketService } from \"./services/websocket\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\nimport { insertIssueSchema, insertCommentSchema, insertUserSchema } from \"@shared/schema\";\n\nconst upload = multer({ storage: multer.memoryStorage(), limits: { fileSize: 10 * 1024 * 1024 } });\n\n// Validation schemas\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1)\n});\n\nconst registerSchema = insertUserSchema.extend({\n  password: z.string().min(6)\n});\n\nconst createIssueSchema = insertIssueSchema.extend({\n  location: z.object({\n    lat: z.number(),\n    lng: z.number()\n  }).optional()\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check\n  app.get(\"/api/health\", async (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      const hashedPassword = await authService.hashPassword(validatedData.password);\n      \n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword\n      });\n\n      const tokens = await authService.generateTokens(user);\n      \n      res.json({\n        user: { ...user, password: undefined },\n        ...tokens\n      });\n    } catch (error) {\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Registration failed\" \n      });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user || !await authService.verifyPassword(password, user.password)) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(403).json({ message: \"Account is deactivated\" });\n      }\n\n      const tokens = await authService.generateTokens(user);\n      \n      res.json({\n        user: { ...user, password: undefined },\n        ...tokens\n      });\n    } catch (error) {\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Login failed\" \n      });\n    }\n  });\n\n  app.post(\"/api/auth/refresh\", async (req, res) => {\n    try {\n      const { refreshToken } = req.body;\n      if (!refreshToken) {\n        return res.status(401).json({ message: \"Refresh token required\" });\n      }\n\n      const tokens = await authService.refreshTokens(refreshToken);\n      res.json(tokens);\n    } catch (error) {\n      res.status(401).json({ message: \"Invalid refresh token\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authMiddleware, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ ...user, password: undefined });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user data\" });\n    }\n  });\n\n  // File upload\n  app.post(\"/api/media/upload\", authMiddleware, upload.array('files', 5), async (req, res) => {\n    try {\n      if (!req.files || !Array.isArray(req.files)) {\n        return res.status(400).json({ message: \"No files uploaded\" });\n      }\n\n      const uploadPromises = req.files.map(file => fileUploadService.uploadFile(file));\n      const uploadedUrls = await Promise.all(uploadPromises);\n      \n      res.json({ urls: uploadedUrls });\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"File upload failed\" \n      });\n    }\n  });\n\n  // Catalog endpoints\n  app.get(\"/api/catalog/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/catalog/wards\", async (req, res) => {\n    try {\n      const wards = await storage.getWards();\n      res.json(wards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch wards\" });\n    }\n  });\n\n  app.get(\"/api/catalog/departments\", async (req, res) => {\n    try {\n      const departments = await storage.getDepartments();\n      res.json(departments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch departments\" });\n    }\n  });\n\n  // Issue routes - Citizen\n  app.post(\"/api/issues\", authMiddleware, async (req, res) => {\n    try {\n      const validatedData = createIssueSchema.parse(req.body);\n      const userId = req.user!.id;\n\n      let latitude = null;\n      let longitude = null;\n      if (validatedData.location) {\n        latitude = validatedData.location.lat.toString();\n        longitude = validatedData.location.lng.toString();\n        \n        // Get address from coordinates\n        try {\n          const address = await geolocationService.reverseGeocode(\n            validatedData.location.lat,\n            validatedData.location.lng\n          );\n          validatedData.address = address;\n        } catch (error) {\n          console.warn(\"Geocoding failed:\", error);\n        }\n      }\n\n      // Auto-assign department based on category\n      const category = await storage.getCategories();\n      const selectedCategory = category.find(c => c.id === validatedData.categoryId);\n      \n      const issue = await storage.createIssue({\n        ...validatedData,\n        latitude,\n        longitude,\n        reporterId: userId,\n        departmentId: selectedCategory?.departmentId || undefined,\n        status: 'SUBMITTED'\n      });\n\n      // Create issue event\n      await storage.createIssueEvent({\n        issueId: issue.id,\n        actorId: userId,\n        type: 'STATUS_CHANGE',\n        payload: { oldStatus: 'DRAFT', newStatus: 'SUBMITTED' }\n      });\n\n      // Send real-time notification\n      webSocketService.notifyNewIssue(issue);\n\n      res.status(201).json(issue);\n    } catch (error) {\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Failed to create issue\" \n      });\n    }\n  });\n\n  app.get(\"/api/issues/my\", authMiddleware, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const status = req.query.status as string;\n\n      const result = await storage.getIssues({\n        reporterId: userId,\n        status,\n        page,\n        limit\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch issues\" });\n    }\n  });\n\n  app.get(\"/api/issues/:ticketNo\", authMiddleware, async (req, res) => {\n    try {\n      const { ticketNo } = req.params;\n      const issue = await storage.getIssueByTicketNo(ticketNo);\n      \n      if (!issue) {\n        return res.status(404).json({ message: \"Issue not found\" });\n      }\n\n      // Check if user can access this issue\n      const userId = req.user!.id;\n      const userRole = req.user!.role;\n      \n      if (userRole === 'CITIZEN' && issue.reporterId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(issue);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch issue\" });\n    }\n  });\n\n  app.post(\"/api/issues/:id/comments\", authMiddleware, async (req, res) => {\n    try {\n      const { id: issueId } = req.params;\n      const userId = req.user!.id;\n      const commentData = insertCommentSchema.parse({\n        ...req.body,\n        issueId,\n        authorId: userId\n      });\n\n      const comment = await storage.createComment(commentData);\n      \n      // Create issue event\n      await storage.createIssueEvent({\n        issueId,\n        actorId: userId,\n        type: 'COMMENT',\n        payload: { commentId: comment.id }\n      });\n\n      res.status(201).json(comment);\n    } catch (error) {\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Failed to create comment\" \n      });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/issues\", authMiddleware, requireRole(['OFFICER', 'SUPERVISOR', 'ADMIN']), async (req, res) => {\n    try {\n      const {\n        page = '1',\n        limit = '10',\n        status,\n        categoryId,\n        wardId,\n        departmentId,\n        search\n      } = req.query;\n\n      const result = await storage.getIssues({\n        status: status as string,\n        categoryId: categoryId as string,\n        wardId: wardId as string,\n        departmentId: departmentId as string,\n        search: search as string,\n        page: parseInt(page as string),\n        limit: parseInt(limit as string)\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch issues\" });\n    }\n  });\n\n  app.patch(\"/api/admin/issues/:id/status\", authMiddleware, requireRole(['OFFICER', 'SUPERVISOR', 'ADMIN']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, rejectedReason } = req.body;\n      const userId = req.user!.id;\n\n      const currentIssue = await storage.getIssue(id);\n      if (!currentIssue) {\n        return res.status(404).json({ message: \"Issue not found\" });\n      }\n\n      const updateData: any = { status };\n      if (status === 'RESOLVED') {\n        updateData.resolvedAt = new Date();\n      }\n      if (status === 'REJECTED' && rejectedReason) {\n        updateData.rejectedReason = rejectedReason;\n      }\n\n      const updatedIssue = await storage.updateIssue(id, updateData);\n\n      // Create issue event\n      await storage.createIssueEvent({\n        issueId: id,\n        actorId: userId,\n        type: 'STATUS_CHANGE',\n        payload: { oldStatus: currentIssue.status, newStatus: status, rejectedReason }\n      });\n\n      res.json(updatedIssue);\n    } catch (error) {\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Failed to update issue status\" \n      });\n    }\n  });\n\n  app.patch(\"/api/admin/issues/:id/assign\", authMiddleware, requireRole(['SUPERVISOR', 'ADMIN']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { assigneeId } = req.body;\n      const userId = req.user!.id;\n\n      const updatedIssue = await storage.updateIssue(id, { \n        assigneeId,\n        status: 'ASSIGNED'\n      });\n\n      // Create issue event\n      await storage.createIssueEvent({\n        issueId: id,\n        actorId: userId,\n        type: 'ASSIGN',\n        payload: { assigneeId }\n      });\n\n      res.json(updatedIssue);\n    } catch (error) {\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Failed to assign issue\" \n      });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/overview\", authMiddleware, requireRole(['OFFICER', 'SUPERVISOR', 'ADMIN']), async (req, res) => {\n    try {\n      const stats = await storage.getIssueStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", authMiddleware, requireRole(['SUPERVISOR', 'ADMIN']), async (req, res) => {\n    try {\n      const users = await storage.getUsersWithStats();\n      res.json(users.map(user => ({ ...user, password: undefined })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11911},"server/storage.ts":{"content":"import { \n  users, departments, wards, categories, issues, issueEvents, \n  comments, notifications, slaBreaches,\n  type User, type InsertUser, type Department, type InsertDepartment,\n  type Ward, type InsertWard, type Category, type InsertCategory,\n  type Issue, type InsertIssue, type IssueEvent, type Comment, \n  type InsertComment, type Notification, type InsertNotification,\n  type IssueWithRelations, type UserWithStats\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, count, sql, ilike, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  getUsersWithStats(): Promise<UserWithStats[]>;\n\n  // Department operations\n  getDepartments(): Promise<Department[]>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n  \n  // Ward operations\n  getWards(): Promise<Ward[]>;\n  createWard(ward: InsertWard): Promise<Ward>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  getCategoriesByDepartment(departmentId: string): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Issue operations\n  getIssues(params: {\n    status?: string;\n    categoryId?: string;\n    wardId?: string;\n    departmentId?: string;\n    reporterId?: string;\n    assigneeId?: string;\n    page?: number;\n    limit?: number;\n    search?: string;\n  }): Promise<{ issues: IssueWithRelations[], total: number }>;\n  getIssue(id: string): Promise<IssueWithRelations | undefined>;\n  getIssueByTicketNo(ticketNo: string): Promise<IssueWithRelations | undefined>;\n  createIssue(issue: InsertIssue): Promise<Issue>;\n  updateIssue(id: string, issue: Partial<InsertIssue>): Promise<Issue>;\n  getIssueStats(): Promise<{\n    total: number;\n    byStatus: Record<string, number>;\n    byPriority: Record<string, number>;\n    byCategory: Record<string, number>;\n    byWard: Record<string, number>;\n  }>;\n  \n  // Comment operations\n  getCommentsByIssue(issueId: string): Promise<(Comment & { author: User })[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n  \n  // Event operations\n  createIssueEvent(event: Omit<IssueEvent, 'id' | 'createdAt'>): Promise<IssueEvent>;\n  \n  // Notification operations\n  getNotificationsByUser(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getUsersWithStats(): Promise<UserWithStats[]> {\n    const usersWithStats = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        name: users.name,\n        phone: users.phone,\n        role: users.role,\n        wardId: users.wardId,\n        isActive: users.isActive,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        fcmToken: users.fcmToken,\n        locale: users.locale,\n        password: users.password,\n        issueCount: sql<number>`count(${issues.id})`.mapWith(Number),\n        resolvedCount: sql<number>`count(case when ${issues.status} = 'RESOLVED' then 1 end)`.mapWith(Number)\n      })\n      .from(users)\n      .leftJoin(issues, eq(issues.assigneeId, users.id))\n      .where(inArray(users.role, ['OFFICER', 'SUPERVISOR']))\n      .groupBy(users.id)\n      .orderBy(asc(users.name));\n    \n    return usersWithStats;\n  }\n\n  async getDepartments(): Promise<Department[]> {\n    return await db.select().from(departments).orderBy(asc(departments.name));\n  }\n\n  async createDepartment(department: InsertDepartment): Promise<Department> {\n    const [newDept] = await db.insert(departments).values(department).returning();\n    return newDept;\n  }\n\n  async getWards(): Promise<Ward[]> {\n    return await db.select().from(wards).orderBy(asc(wards.name));\n  }\n\n  async createWard(ward: InsertWard): Promise<Ward> {\n    const [newWard] = await db.insert(wards).values(ward).returning();\n    return newWard;\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return await db\n      .select()\n      .from(categories)\n      .orderBy(asc(categories.name));\n  }\n\n  async getCategoriesByDepartment(departmentId: string): Promise<Category[]> {\n    return await db\n      .select()\n      .from(categories)\n      .where(eq(categories.departmentId, departmentId))\n      .orderBy(asc(categories.name));\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  async getIssues(params: {\n    status?: string;\n    categoryId?: string;\n    wardId?: string;\n    departmentId?: string;\n    reporterId?: string;\n    assigneeId?: string;\n    page?: number;\n    limit?: number;\n    search?: string;\n  }): Promise<{ issues: IssueWithRelations[], total: number }> {\n    const { page = 1, limit = 10, search, ...filters } = params;\n    const offset = (page - 1) * limit;\n\n    let whereConditions = [];\n    \n    if (filters.status) {\n      whereConditions.push(eq(issues.status, filters.status as any));\n    }\n    if (filters.categoryId) {\n      whereConditions.push(eq(issues.categoryId, filters.categoryId));\n    }\n    if (filters.wardId) {\n      whereConditions.push(eq(issues.wardId, filters.wardId));\n    }\n    if (filters.departmentId) {\n      whereConditions.push(eq(issues.departmentId, filters.departmentId));\n    }\n    if (filters.reporterId) {\n      whereConditions.push(eq(issues.reporterId, filters.reporterId));\n    }\n    if (filters.assigneeId) {\n      whereConditions.push(eq(issues.assigneeId, filters.assigneeId));\n    }\n    if (search) {\n      whereConditions.push(ilike(issues.title, `%${search}%`));\n    }\n\n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n\n    const [issuesResult, totalResult] = await Promise.all([\n      db\n        .select({\n          id: issues.id,\n          ticketNo: issues.ticketNo,\n          title: issues.title,\n          description: issues.description,\n          status: issues.status,\n          priority: issues.priority,\n          priorityScore: issues.priorityScore,\n          address: issues.address,\n          imageUrls: issues.imageUrls,\n          videoUrls: issues.videoUrls,\n          createdAt: issues.createdAt,\n          updatedAt: issues.updatedAt,\n          resolvedAt: issues.resolvedAt,\n          rejectedReason: issues.rejectedReason,\n          categoryId: issues.categoryId,\n          wardId: issues.wardId,\n          departmentId: issues.departmentId,\n          reporterId: issues.reporterId,\n          assigneeId: issues.assigneeId,\n          duplicateOfIssueId: issues.duplicateOfIssueId,\n          latitude: issues.latitude,\n          longitude: issues.longitude,\n          category: {\n            id: categories.id,\n            name: categories.name,\n            code: categories.code,\n            icon: categories.icon,\n            slaHours: categories.slaHours,\n            priorityWeight: categories.priorityWeight,\n            departmentId: categories.departmentId,\n            createdAt: categories.createdAt\n          },\n          ward: {\n            id: wards.id,\n            name: wards.name,\n            code: wards.code,\n            geojson: wards.geojson,\n            createdAt: wards.createdAt\n          },\n          department: {\n            id: departments.id,\n            name: departments.name,\n            code: departments.code,\n            email: departments.email,\n            phone: departments.phone,\n            createdAt: departments.createdAt\n          },\n          reporter: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n            phone: users.phone,\n            role: users.role,\n            wardId: users.wardId,\n            fcmToken: users.fcmToken,\n            locale: users.locale,\n            isActive: users.isActive,\n            createdAt: users.createdAt,\n            updatedAt: users.updatedAt,\n            password: users.password\n          }\n        })\n        .from(issues)\n        .leftJoin(categories, eq(issues.categoryId, categories.id))\n        .leftJoin(wards, eq(issues.wardId, wards.id))\n        .leftJoin(departments, eq(issues.departmentId, departments.id))\n        .leftJoin(users, eq(issues.reporterId, users.id))\n        .where(whereClause)\n        .orderBy(desc(issues.createdAt))\n        .limit(limit)\n        .offset(offset),\n      \n      db\n        .select({ count: count() })\n        .from(issues)\n        .where(whereClause)\n    ]);\n\n    const transformedIssues: IssueWithRelations[] = issuesResult.map(row => ({\n      id: row.id,\n      ticketNo: row.ticketNo,\n      title: row.title,\n      description: row.description,\n      status: row.status,\n      priority: row.priority,\n      priorityScore: row.priorityScore,\n      address: row.address,\n      imageUrls: row.imageUrls,\n      videoUrls: row.videoUrls,\n      createdAt: row.createdAt,\n      updatedAt: row.updatedAt,\n      resolvedAt: row.resolvedAt,\n      rejectedReason: row.rejectedReason,\n      categoryId: row.categoryId,\n      wardId: row.wardId,\n      departmentId: row.departmentId,\n      reporterId: row.reporterId,\n      assigneeId: row.assigneeId,\n      duplicateOfIssueId: row.duplicateOfIssueId,\n      latitude: row.latitude,\n      longitude: row.longitude,\n      category: row.category?.id ? row.category : undefined,\n      ward: row.ward?.id ? row.ward : undefined,\n      department: row.department?.id ? row.department : undefined,\n      reporter: row.reporter?.id ? row.reporter : undefined\n    }));\n\n    return {\n      issues: transformedIssues,\n      total: totalResult[0].count\n    };\n  }\n\n  async getIssue(id: string): Promise<IssueWithRelations | undefined> {\n    const result = await this.getIssues({ page: 1, limit: 1 });\n    const [issue] = await db\n      .select()\n      .from(issues)\n      .where(eq(issues.id, id));\n      \n    if (!issue) return undefined;\n\n    const [category, ward, department, reporter, assignee] = await Promise.all([\n      issue.categoryId ? db.select().from(categories).where(eq(categories.id, issue.categoryId)).then(r => r[0]) : null,\n      issue.wardId ? db.select().from(wards).where(eq(wards.id, issue.wardId)).then(r => r[0]) : null,\n      issue.departmentId ? db.select().from(departments).where(eq(departments.id, issue.departmentId)).then(r => r[0]) : null,\n      db.select().from(users).where(eq(users.id, issue.reporterId)).then(r => r[0]),\n      issue.assigneeId ? db.select().from(users).where(eq(users.id, issue.assigneeId)).then(r => r[0]) : null,\n    ]);\n\n    const commentsWithAuthors = await this.getCommentsByIssue(id);\n    \n    return {\n      ...issue,\n      category: category || undefined,\n      ward: ward || undefined,\n      department: department || undefined,\n      reporter: reporter || undefined,\n      assignee: assignee || undefined,\n      comments: commentsWithAuthors\n    };\n  }\n\n  async getIssueByTicketNo(ticketNo: string): Promise<IssueWithRelations | undefined> {\n    const [issue] = await db\n      .select()\n      .from(issues)\n      .where(eq(issues.ticketNo, ticketNo));\n      \n    if (!issue) return undefined;\n    return this.getIssue(issue.id);\n  }\n\n  async createIssue(issue: InsertIssue): Promise<Issue> {\n    // Generate ticket number\n    const ticketNo = `CR-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n    \n    const [newIssue] = await db\n      .insert(issues)\n      .values({ ...issue, ticketNo })\n      .returning();\n    \n    return newIssue;\n  }\n\n  async updateIssue(id: string, updateData: Partial<InsertIssue>): Promise<Issue> {\n    const [updatedIssue] = await db\n      .update(issues)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(issues.id, id))\n      .returning();\n    \n    return updatedIssue;\n  }\n\n  async getIssueStats(): Promise<{\n    total: number;\n    byStatus: Record<string, number>;\n    byPriority: Record<string, number>;\n    byCategory: Record<string, number>;\n    byWard: Record<string, number>;\n  }> {\n    const [totalCount, statusStats, priorityStats, categoryStats, wardStats] = await Promise.all([\n      db.select({ count: count() }).from(issues),\n      db\n        .select({ status: issues.status, count: count() })\n        .from(issues)\n        .groupBy(issues.status),\n      db\n        .select({ priority: issues.priority, count: count() })\n        .from(issues)\n        .groupBy(issues.priority),\n      db\n        .select({ name: categories.name, count: count() })\n        .from(issues)\n        .leftJoin(categories, eq(issues.categoryId, categories.id))\n        .groupBy(categories.name),\n      db\n        .select({ name: wards.name, count: count() })\n        .from(issues)\n        .leftJoin(wards, eq(issues.wardId, wards.id))\n        .groupBy(wards.name)\n    ]);\n\n    return {\n      total: totalCount[0].count,\n      byStatus: Object.fromEntries(statusStats.map(s => [s.status, s.count])),\n      byPriority: Object.fromEntries(priorityStats.map(p => [p.priority || 'UNKNOWN', p.count])),\n      byCategory: Object.fromEntries(categoryStats.map(c => [c.name || 'UNKNOWN', c.count])),\n      byWard: Object.fromEntries(wardStats.map(w => [w.name || 'UNKNOWN', w.count]))\n    };\n  }\n\n  async getCommentsByIssue(issueId: string): Promise<(Comment & { author: User })[]> {\n    const commentsWithAuthors = await db\n      .select({\n        id: comments.id,\n        issueId: comments.issueId,\n        authorId: comments.authorId,\n        body: comments.body,\n        attachments: comments.attachments,\n        createdAt: comments.createdAt,\n        author: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          phone: users.phone,\n          role: users.role,\n          wardId: users.wardId,\n          fcmToken: users.fcmToken,\n          locale: users.locale,\n          isActive: users.isActive,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n          password: users.password\n        }\n      })\n      .from(comments)\n      .innerJoin(users, eq(comments.authorId, users.id))\n      .where(eq(comments.issueId, issueId))\n      .orderBy(asc(comments.createdAt));\n\n    return commentsWithAuthors.map(row => ({\n      id: row.id,\n      issueId: row.issueId,\n      authorId: row.authorId,\n      body: row.body,\n      attachments: row.attachments,\n      createdAt: row.createdAt,\n      author: row.author\n    }));\n  }\n\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const [newComment] = await db.insert(comments).values(comment).returning();\n    return newComment;\n  }\n\n  async createIssueEvent(event: Omit<IssueEvent, 'id' | 'createdAt'>): Promise<IssueEvent> {\n    const [newEvent] = await db.insert(issueEvents).values({\n      ...event,\n      createdAt: new Date()\n    }).returning();\n    return newEvent;\n  }\n\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.recipientId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":16421},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { \n  pgTable, \n  varchar, \n  text, \n  timestamp, \n  boolean, \n  integer, \n  decimal,\n  jsonb,\n  pgEnum,\n  geometry\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['CITIZEN', 'OFFICER', 'SUPERVISOR', 'ADMIN']);\nexport const issueStatusEnum = pgEnum('issue_status', [\n  'DRAFT', 'SUBMITTED', 'TRIAGED', 'ASSIGNED', 'IN_PROGRESS', 'PENDING_USER_INFO', 'RESOLVED', 'REJECTED'\n]);\nexport const issuePriorityEnum = pgEnum('issue_priority', ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']);\nexport const eventTypeEnum = pgEnum('event_type', [\n  'STATUS_CHANGE', 'COMMENT', 'ASSIGN', 'ESCALATE', 'MERGE_DUPLICATE'\n]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  phone: varchar(\"phone\", { length: 20 }),\n  name: text(\"name\").notNull(),\n  password: text(\"password\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('CITIZEN'),\n  wardId: varchar(\"ward_id\"),\n  fcmToken: text(\"fcm_token\"),\n  locale: varchar(\"locale\", { length: 10 }).default('en'),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Departments table\nexport const departments = pgTable(\"departments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: varchar(\"code\", { length: 10 }).notNull().unique(),\n  email: text(\"email\"),\n  phone: varchar(\"phone\", { length: 20 }),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Wards table\nexport const wards = pgTable(\"wards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: varchar(\"code\", { length: 10 }).notNull().unique(),\n  geojson: jsonb(\"geojson\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: varchar(\"code\", { length: 20 }).notNull().unique(),\n  icon: text(\"icon\"),\n  slaHours: integer(\"sla_hours\").notNull().default(72),\n  priorityWeight: integer(\"priority_weight\").default(1),\n  departmentId: varchar(\"department_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Issues table\nexport const issues = pgTable(\"issues\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketNo: varchar(\"ticket_no\", { length: 20 }).notNull().unique(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  categoryId: varchar(\"category_id\").notNull(),\n  wardId: varchar(\"ward_id\"),\n  departmentId: varchar(\"department_id\"),\n  reporterId: varchar(\"reporter_id\").notNull(),\n  assigneeId: varchar(\"assignee_id\"),\n  status: issueStatusEnum(\"status\").notNull().default('DRAFT'),\n  priority: issuePriorityEnum(\"priority\").default('MEDIUM'),\n  priorityScore: integer(\"priority_score\").default(0),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  address: text(\"address\"),\n  imageUrls: text(\"image_urls\").array().default([]),\n  videoUrls: text(\"video_urls\").array().default([]),\n  duplicateOfIssueId: varchar(\"duplicate_of_issue_id\"),\n  rejectedReason: text(\"rejected_reason\"),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Issue events table\nexport const issueEvents = pgTable(\"issue_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  issueId: varchar(\"issue_id\").notNull(),\n  actorId: varchar(\"actor_id\").notNull(),\n  type: eventTypeEnum(\"type\").notNull(),\n  payload: jsonb(\"payload\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Comments table\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  issueId: varchar(\"issue_id\").notNull(),\n  authorId: varchar(\"author_id\").notNull(),\n  body: text(\"body\").notNull(),\n  attachments: text(\"attachments\").array().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// SLA Breaches table\nexport const slaBreaches = pgTable(\"sla_breaches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  issueId: varchar(\"issue_id\").notNull(),\n  breachedAt: timestamp(\"breached_at\").notNull(),\n  resolvedAt: timestamp(\"resolved_at\"),\n  escalatedToUserId: varchar(\"escalated_to_user_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  recipientId: varchar(\"recipient_id\").notNull(),\n  type: text(\"type\").notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  payload: jsonb(\"payload\"),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  ward: one(wards, {\n    fields: [users.wardId],\n    references: [wards.id],\n  }),\n  reportedIssues: many(issues, { relationName: \"reporter\" }),\n  assignedIssues: many(issues, { relationName: \"assignee\" }),\n  comments: many(comments),\n  events: many(issueEvents),\n  notifications: many(notifications)\n}));\n\nexport const departmentsRelations = relations(departments, ({ many }) => ({\n  categories: many(categories),\n  issues: many(issues)\n}));\n\nexport const wardsRelations = relations(wards, ({ many }) => ({\n  users: many(users),\n  issues: many(issues)\n}));\n\nexport const categoriesRelations = relations(categories, ({ one, many }) => ({\n  department: one(departments, {\n    fields: [categories.departmentId],\n    references: [departments.id],\n  }),\n  issues: many(issues)\n}));\n\nexport const issuesRelations = relations(issues, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [issues.categoryId],\n    references: [categories.id],\n  }),\n  ward: one(wards, {\n    fields: [issues.wardId],\n    references: [wards.id],\n  }),\n  department: one(departments, {\n    fields: [issues.departmentId],\n    references: [departments.id],\n  }),\n  reporter: one(users, {\n    fields: [issues.reporterId],\n    references: [users.id],\n    relationName: \"reporter\"\n  }),\n  assignee: one(users, {\n    fields: [issues.assigneeId],\n    references: [users.id],\n    relationName: \"assignee\"\n  }),\n  events: many(issueEvents),\n  comments: many(comments),\n  slaBreaches: many(slaBreaches)\n}));\n\nexport const issueEventsRelations = relations(issueEvents, ({ one }) => ({\n  issue: one(issues, {\n    fields: [issueEvents.issueId],\n    references: [issues.id],\n  }),\n  actor: one(users, {\n    fields: [issueEvents.actorId],\n    references: [users.id],\n  })\n}));\n\nexport const commentsRelations = relations(comments, ({ one }) => ({\n  issue: one(issues, {\n    fields: [comments.issueId],\n    references: [issues.id],\n  }),\n  author: one(users, {\n    fields: [comments.authorId],\n    references: [users.id],\n  })\n}));\n\nexport const slaBreachesRelations = relations(slaBreaches, ({ one }) => ({\n  issue: one(issues, {\n    fields: [slaBreaches.issueId],\n    references: [issues.id],\n  }),\n  escalatedToUser: one(users, {\n    fields: [slaBreaches.escalatedToUserId],\n    references: [users.id],\n  })\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  recipient: one(users, {\n    fields: [notifications.recipientId],\n    references: [users.id],\n  })\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertDepartmentSchema = createInsertSchema(departments).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertWardSchema = createInsertSchema(wards).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertIssueSchema = createInsertSchema(issues).omit({\n  id: true,\n  ticketNo: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Department = typeof departments.$inferSelect;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\n\nexport type Ward = typeof wards.$inferSelect;\nexport type InsertWard = z.infer<typeof insertWardSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Issue = typeof issues.$inferSelect;\nexport type InsertIssue = z.infer<typeof insertIssueSchema>;\n\nexport type IssueEvent = typeof issueEvents.$inferSelect;\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n\nexport type SLABreach = typeof slaBreaches.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\n// Extended types for API responses\nexport type IssueWithRelations = Issue & {\n  category?: Category;\n  ward?: Ward;\n  department?: Department;\n  reporter?: User;\n  assignee?: User;\n  events?: IssueEvent[];\n  comments?: (Comment & { author?: User })[];\n};\n\nexport type UserWithStats = User & {\n  issueCount?: number;\n  resolvedCount?: number;\n};\n","size_bytes":9856},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"./hooks/use-auth\";\nimport Home from \"./pages/home\";\nimport ReportIssue from \"./pages/report-issue\";\nimport TrackIssues from \"./pages/track-issues\";\nimport AdminDashboard from \"./pages/admin-dashboard\";\nimport Login from \"./pages/login\";\nimport NotFound from \"@/pages/not-found\";\nimport Header from \"./components/layout/header\";\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <main>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/report\" component={ReportIssue} />\n          <Route path=\"/track\" component={TrackIssues} />\n          <Route path=\"/admin\" component={AdminDashboard} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1710},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(210, 20%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 20%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 20%, 15%);\n  --primary: hsl(210, 80%, 42%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(38, 92%, 50%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 20%, 96%);\n  --muted-foreground: hsl(210, 20%, 45%);\n  --accent: hsl(210, 20%, 92%);\n  --accent-foreground: hsl(210, 20%, 15%);\n  --destructive: hsl(0, 65%, 48%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 20%, 89%);\n  --input: hsl(210, 20%, 89%);\n  --ring: hsl(210, 80%, 42%);\n  --success: hsl(120, 45%, 35%);\n  --warning: hsl(28, 84%, 48%);\n  --radius: 8px;\n\n  /* Chart colors */\n  --chart-1: hsl(210, 80%, 42%);\n  --chart-2: hsl(120, 45%, 35%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(28, 84%, 48%);\n  --chart-5: hsl(0, 65%, 48%);\n\n  /* Sidebar */\n  --sidebar-background: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 20%, 15%);\n  --sidebar-primary: hsl(210, 80%, 42%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 20%, 92%);\n  --sidebar-accent-foreground: hsl(210, 20%, 15%);\n  --sidebar-border: hsl(210, 20%, 89%);\n  --sidebar-ring: hsl(210, 80%, 42%);\n\n  /* Font */\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(210, 80%, 42%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(38, 92%, 50%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(210, 80%, 42%);\n  --destructive: hsl(0, 65%, 48%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(210, 80%, 42%);\n  --success: hsl(120, 45%, 35%);\n  --warning: hsl(28, 84%, 48%);\n\n  --sidebar-background: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(210, 80%, 42%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(210, 80%, 42%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(210, 80%, 42%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    font-family: var(--font-sans);\n    @apply bg-background text-foreground antialiased;\n  }\n\n  /* Custom status badge styles */\n  .status-submitted { @apply bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400; }\n  .status-triaged { @apply bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400; }\n  .status-assigned { @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400; }\n  .status-in-progress { @apply bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400; }\n  .status-pending-user-info { @apply bg-cyan-100 text-cyan-800 dark:bg-cyan-900/20 dark:text-cyan-400; }\n  .status-resolved { @apply bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400; }\n  .status-rejected { @apply bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400; }\n\n  /* Priority indicators */\n  .priority-high { @apply border-l-4 border-red-500; }\n  .priority-medium { @apply border-l-4 border-yellow-500; }\n  .priority-low { @apply border-l-4 border-green-500; }\n  .priority-critical { @apply border-l-4 border-red-700; }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-primary text-primary-foreground hover:bg-primary hover:opacity-90 transition-colors;\n  }\n\n  .btn-secondary {\n    @apply bg-secondary text-secondary-foreground hover:bg-secondary hover:opacity-90 transition-colors;\n  }\n}\n","size_bytes":4256},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { authService } from \"../services/auth\";\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        email: string;\n        role: string;\n        wardId?: string;\n      };\n    }\n  }\n}\n\nexport const authMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ message: \"Authorization token required\" });\n    }\n\n    const token = authHeader.substring(7);\n    const user = await authService.verifyAccessToken(token);\n    \n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: \"Invalid or expired token\" });\n  }\n};\n\nexport const requireRole = (allowedRoles: string[]) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ \n        message: \"Insufficient permissions\",\n        required: allowedRoles,\n        current: req.user.role\n      });\n    }\n\n    next();\n  };\n};\n","size_bytes":1291},"server/services/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { User } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"civic-connect-jwt-secret\";\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || \"civic-connect-refresh-secret\";\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"15m\";\nconst JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || \"7d\";\n\nexport class AuthService {\n  async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, 12);\n  }\n\n  async verifyPassword(password: string, hash: string): Promise<boolean> {\n    return bcrypt.compare(password, hash);\n  }\n\n  async generateTokens(user: User): Promise<{\n    accessToken: string;\n    refreshToken: string;\n    expiresIn: number;\n  }> {\n    const payload = {\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      wardId: user.wardId\n    };\n\n    const accessToken = jwt.sign(payload, JWT_SECRET, {\n      expiresIn: JWT_EXPIRES_IN,\n      issuer: \"civic-connect\",\n      audience: \"civic-connect-users\"\n    } as jwt.SignOptions);\n\n    const refreshToken = jwt.sign(\n      { id: user.id, tokenType: \"refresh\" },\n      JWT_REFRESH_SECRET,\n      {\n        expiresIn: JWT_REFRESH_EXPIRES_IN,\n        issuer: \"civic-connect\",\n        audience: \"civic-connect-users\"\n      } as jwt.SignOptions\n    );\n\n    // Calculate expiration time in seconds\n    const expiresIn = this.parseTimeToSeconds(JWT_EXPIRES_IN);\n\n    return { accessToken, refreshToken, expiresIn };\n  }\n\n  async verifyAccessToken(token: string): Promise<{\n    id: string;\n    email: string;\n    role: string;\n    wardId?: string;\n  }> {\n    try {\n      const decoded = jwt.verify(token, JWT_SECRET, {\n        issuer: \"civic-connect\",\n        audience: \"civic-connect-users\"\n      }) as any;\n\n      return {\n        id: decoded.id,\n        email: decoded.email,\n        role: decoded.role,\n        wardId: decoded.wardId\n      };\n    } catch (error) {\n      throw new Error(\"Invalid access token\");\n    }\n  }\n\n  async refreshTokens(refreshToken: string): Promise<{\n    accessToken: string;\n    refreshToken: string;\n    expiresIn: number;\n  }> {\n    try {\n      const decoded = jwt.verify(refreshToken, JWT_REFRESH_SECRET, {\n        issuer: \"civic-connect\",\n        audience: \"civic-connect-users\"\n      }) as any;\n\n      if (decoded.tokenType !== \"refresh\") {\n        throw new Error(\"Invalid token type\");\n      }\n\n      // In a production app, you'd fetch the user from database\n      // and check if the refresh token is still valid\n      const { storage } = await import(\"../storage\");\n      const user = await storage.getUser(decoded.id);\n      \n      if (!user || !user.isActive) {\n        throw new Error(\"User not found or inactive\");\n      }\n\n      return this.generateTokens(user);\n    } catch (error) {\n      throw new Error(\"Invalid refresh token\");\n    }\n  }\n\n  private parseTimeToSeconds(timeStr: string): number {\n    const unit = timeStr.slice(-1);\n    const value = parseInt(timeStr.slice(0, -1));\n\n    switch (unit) {\n      case 's': return value;\n      case 'm': return value * 60;\n      case 'h': return value * 60 * 60;\n      case 'd': return value * 24 * 60 * 60;\n      default: return 900; // default 15 minutes\n    }\n  }\n}\n\nexport const authService = new AuthService();\n","size_bytes":3313},"server/services/file-upload.ts":{"content":"import { randomUUID } from \"crypto\";\nimport { writeFile, mkdir } from \"fs/promises\";\nimport { join } from \"path\";\nimport { existsSync } from \"fs\";\n\nexport class FileUploadService {\n  private uploadDir = process.env.UPLOAD_DIR || \"uploads\";\n\n  constructor() {\n    this.ensureUploadDir();\n  }\n\n  private async ensureUploadDir() {\n    if (!existsSync(this.uploadDir)) {\n      await mkdir(this.uploadDir, { recursive: true });\n    }\n  }\n\n  async uploadFile(file: Express.Multer.File): Promise<string> {\n    const fileExtension = file.originalname.split('.').pop() || 'bin';\n    const fileName = `${randomUUID()}.${fileExtension}`;\n    const filePath = join(this.uploadDir, fileName);\n\n    await writeFile(filePath, file.buffer);\n\n    // Return the URL path for accessing the file\n    // In production, this would be a CDN URL or S3 URL\n    return `/uploads/${fileName}`;\n  }\n\n  async uploadMultiple(files: Express.Multer.File[]): Promise<string[]> {\n    const uploadPromises = files.map(file => this.uploadFile(file));\n    return Promise.all(uploadPromises);\n  }\n\n  validateFile(file: Express.Multer.File): boolean {\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n\n    if (!allowedTypes.includes(file.mimetype)) {\n      throw new Error(`File type ${file.mimetype} is not allowed`);\n    }\n\n    if (file.size > maxSize) {\n      throw new Error('File size exceeds 10MB limit');\n    }\n\n    return true;\n  }\n}\n\nexport const fileUploadService = new FileUploadService();\n","size_bytes":1540},"server/services/geolocation.ts":{"content":"export class GeolocationService {\n  private mapboxToken = process.env.MAPBOX_ACCESS_TOKEN;\n  private googleMapsApiKey = process.env.GOOGLE_MAPS_API_KEY;\n\n  async reverseGeocode(lat: number, lng: number): Promise<string> {\n    try {\n      // Try Mapbox first if token is available\n      if (this.mapboxToken) {\n        return await this.reverseGeocodeMapbox(lat, lng);\n      }\n      \n      // Fallback to Google Maps if API key is available\n      if (this.googleMapsApiKey) {\n        return await this.reverseGeocodeGoogle(lat, lng);\n      }\n\n      // Return formatted coordinates if no geocoding service is available\n      return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;\n    } catch (error) {\n      console.error(\"Geocoding error:\", error);\n      return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;\n    }\n  }\n\n  private async reverseGeocodeMapbox(lat: number, lng: number): Promise<string> {\n    const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${this.mapboxToken}`;\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Mapbox geocoding failed: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.features && data.features.length > 0) {\n      return data.features[0].place_name;\n    }\n\n    return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;\n  }\n\n  private async reverseGeocodeGoogle(lat: number, lng: number): Promise<string> {\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${this.googleMapsApiKey}`;\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Google geocoding failed: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.results && data.results.length > 0) {\n      return data.results[0].formatted_address;\n    }\n\n    return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;\n  }\n\n  async detectWard(lat: number, lng: number): Promise<string | null> {\n    // This would typically query PostGIS to find which ward polygon contains the point\n    // For now, we'll return a mock implementation\n    try {\n      const { storage } = await import(\"../storage\");\n      const wards = await storage.getWards();\n      \n      // In a real implementation, this would use PostGIS ST_Contains function\n      // to find the ward polygon that contains the point\n      // For now, return the first ward as a placeholder\n      return wards[0]?.id || null;\n    } catch (error) {\n      console.error(\"Ward detection error:\", error);\n      return null;\n    }\n  }\n}\n\nexport const geolocationService = new GeolocationService();\n","size_bytes":2639},"client/src/hooks/use-auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { authManager } from \"../lib/auth\";\nimport { apiClient } from \"../lib/api\";\nimport { User } from \"../types\";\nimport { useToast } from \"./use-toast\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: () => apiClient.getCurrentUser(),\n    enabled: authManager.isAuthenticated(),\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: ({ email, password }: { email: string; password: string }) =>\n      authManager.login(email, password),\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/auth/me'], data.user);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: (userData: {\n      name: string;\n      email: string;\n      phone?: string;\n      password: string;\n      role?: string;\n    }) => authManager.register(userData),\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/auth/me'], data.user);\n      toast({\n        title: \"Registration successful\",\n        description: \"Welcome to CivicConnect!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logout = () => {\n    authManager.logout();\n    queryClient.clear();\n  };\n\n  return {\n    user: user as User | undefined,\n    isLoading: isLoading && authManager.isAuthenticated(),\n    isAuthenticated: authManager.isAuthenticated(),\n    login: loginMutation.mutateAsync,\n    register: registerMutation.mutateAsync,\n    logout,\n    isLoggingIn: loginMutation.isPending,\n    isRegistering: registerMutation.isPending,\n  };\n}\n","size_bytes":2165},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport class ApiClient {\n  private baseUrl = \"/api\";\n\n  // Auth methods\n  async login(email: string, password: string) {\n    const response = await apiRequest(\"POST\", `${this.baseUrl}/auth/login`, {\n      email,\n      password,\n    });\n    return response.json();\n  }\n\n  async register(userData: {\n    name: string;\n    email: string;\n    phone?: string;\n    password: string;\n    role?: string;\n  }) {\n    const response = await apiRequest(\"POST\", `${this.baseUrl}/auth/register`, userData);\n    return response.json();\n  }\n\n  async refreshToken(refreshToken: string) {\n    const response = await apiRequest(\"POST\", `${this.baseUrl}/auth/refresh`, {\n      refreshToken,\n    });\n    return response.json();\n  }\n\n  async getCurrentUser() {\n    const response = await apiRequest(\"GET\", `${this.baseUrl}/auth/me`);\n    return response.json();\n  }\n\n  // Issue methods\n  async createIssue(issueData: any) {\n    const response = await apiRequest(\"POST\", `${this.baseUrl}/issues`, issueData);\n    return response.json();\n  }\n\n  async getMyIssues(params: {\n    page?: number;\n    limit?: number;\n    status?: string;\n  } = {}) {\n    const searchParams = new URLSearchParams();\n    if (params.page) searchParams.set(\"page\", params.page.toString());\n    if (params.limit) searchParams.set(\"limit\", params.limit.toString());\n    if (params.status) searchParams.set(\"status\", params.status);\n\n    const response = await apiRequest(\"GET\", `${this.baseUrl}/issues/my?${searchParams}`);\n    return response.json();\n  }\n\n  async getIssue(ticketNo: string) {\n    const response = await apiRequest(\"GET\", `${this.baseUrl}/issues/${ticketNo}`);\n    return response.json();\n  }\n\n  async addComment(issueId: string, body: string, attachments: string[] = []) {\n    const response = await apiRequest(\"POST\", `${this.baseUrl}/issues/${issueId}/comments`, {\n      body,\n      attachments,\n    });\n    return response.json();\n  }\n\n  // Admin methods\n  async getAdminIssues(params: {\n    page?: number;\n    limit?: number;\n    status?: string;\n    categoryId?: string;\n    wardId?: string;\n    departmentId?: string;\n    search?: string;\n  } = {}) {\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value) searchParams.set(key, value.toString());\n    });\n\n    const response = await apiRequest(\"GET\", `${this.baseUrl}/admin/issues?${searchParams}`);\n    return response.json();\n  }\n\n  async updateIssueStatus(issueId: string, status: string, rejectedReason?: string) {\n    const response = await apiRequest(\"PATCH\", `${this.baseUrl}/admin/issues/${issueId}/status`, {\n      status,\n      rejectedReason,\n    });\n    return response.json();\n  }\n\n  async assignIssue(issueId: string, assigneeId: string) {\n    const response = await apiRequest(\"PATCH\", `${this.baseUrl}/admin/issues/${issueId}/assign`, {\n      assigneeId,\n    });\n    return response.json();\n  }\n\n  async getAnalytics() {\n    const response = await apiRequest(\"GET\", `${this.baseUrl}/admin/analytics/overview`);\n    return response.json();\n  }\n\n  async getUsers() {\n    const response = await apiRequest(\"GET\", `${this.baseUrl}/admin/users`);\n    return response.json();\n  }\n\n  // Catalog methods\n  async getCategories() {\n    const response = await apiRequest(\"GET\", `${this.baseUrl}/catalog/categories`);\n    return response.json();\n  }\n\n  async getWards() {\n    const response = await apiRequest(\"GET\", `${this.baseUrl}/catalog/wards`);\n    return response.json();\n  }\n\n  async getDepartments() {\n    const response = await apiRequest(\"GET\", `${this.baseUrl}/catalog/departments`);\n    return response.json();\n  }\n\n  // File upload\n  async uploadFiles(files: File[]) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n\n    const response = await fetch(`${this.baseUrl}/media/upload`, {\n      method: 'POST',\n      body: formData,\n      credentials: 'include',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Upload failed: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n}\n\nexport const apiClient = new ApiClient();\n","size_bytes":4251},"client/src/lib/auth.ts":{"content":"import { apiClient } from \"./api\";\n\nexport interface AuthTokens {\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n}\n\nexport class AuthManager {\n  private static instance: AuthManager;\n  private tokens: AuthTokens | null = null;\n  private refreshPromise: Promise<AuthTokens> | null = null;\n\n  static getInstance(): AuthManager {\n    if (!AuthManager.instance) {\n      AuthManager.instance = new AuthManager();\n    }\n    return AuthManager.instance;\n  }\n\n  constructor() {\n    this.loadTokensFromStorage();\n  }\n\n  private loadTokensFromStorage() {\n    try {\n      const accessToken = localStorage.getItem('accessToken');\n      const refreshToken = localStorage.getItem('refreshToken');\n      const expiresIn = localStorage.getItem('expiresIn');\n\n      if (accessToken && refreshToken && expiresIn) {\n        this.tokens = {\n          accessToken,\n          refreshToken,\n          expiresIn: parseInt(expiresIn, 10),\n        };\n      }\n    } catch (error) {\n      console.warn('Failed to load tokens from storage:', error);\n    }\n  }\n\n  private saveTokensToStorage(tokens: AuthTokens) {\n    try {\n      localStorage.setItem('accessToken', tokens.accessToken);\n      localStorage.setItem('refreshToken', tokens.refreshToken);\n      localStorage.setItem('expiresIn', tokens.expiresIn.toString());\n      this.tokens = tokens;\n    } catch (error) {\n      console.error('Failed to save tokens to storage:', error);\n    }\n  }\n\n  private clearTokensFromStorage() {\n    try {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('expiresIn');\n      this.tokens = null;\n    } catch (error) {\n      console.warn('Failed to clear tokens from storage:', error);\n    }\n  }\n\n  async login(email: string, password: string): Promise<any> {\n    try {\n      const response = await apiClient.login(email, password);\n      \n      if (response.accessToken && response.refreshToken) {\n        this.saveTokensToStorage({\n          accessToken: response.accessToken,\n          refreshToken: response.refreshToken,\n          expiresIn: response.expiresIn,\n        });\n      }\n\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async register(userData: {\n    name: string;\n    email: string;\n    phone?: string;\n    password: string;\n    role?: string;\n  }): Promise<any> {\n    try {\n      const response = await apiClient.register(userData);\n      \n      if (response.accessToken && response.refreshToken) {\n        this.saveTokensToStorage({\n          accessToken: response.accessToken,\n          refreshToken: response.refreshToken,\n          expiresIn: response.expiresIn,\n        });\n      }\n\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  logout() {\n    this.clearTokensFromStorage();\n    window.location.href = '/';\n  }\n\n  getAccessToken(): string | null {\n    return this.tokens?.accessToken || null;\n  }\n\n  async getValidAccessToken(): Promise<string | null> {\n    if (!this.tokens) {\n      return null;\n    }\n\n    // Check if token needs refresh (refresh 5 minutes before expiry)\n    const now = Date.now() / 1000;\n    const tokenIssuedAt = this.extractTokenIssuedAt(this.tokens.accessToken);\n    const expiresAt = tokenIssuedAt + this.tokens.expiresIn;\n    \n    if (now + 300 >= expiresAt) { // 5 minutes buffer\n      try {\n        await this.refreshTokens();\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        this.logout();\n        return null;\n      }\n    }\n\n    return this.tokens?.accessToken || null;\n  }\n\n  private extractTokenIssuedAt(token: string): number {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.iat || 0;\n    } catch {\n      return 0;\n    }\n  }\n\n  private async refreshTokens(): Promise<AuthTokens> {\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    if (!this.tokens?.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    this.refreshPromise = apiClient.refreshToken(this.tokens.refreshToken)\n      .then((response) => {\n        const newTokens = {\n          accessToken: response.accessToken,\n          refreshToken: response.refreshToken,\n          expiresIn: response.expiresIn,\n        };\n        this.saveTokensToStorage(newTokens);\n        return newTokens;\n      })\n      .finally(() => {\n        this.refreshPromise = null;\n      });\n\n    return this.refreshPromise;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.tokens?.accessToken;\n  }\n}\n\nexport const authManager = AuthManager.getInstance();\n","size_bytes":4595},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"../hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, List, Map, BarChart3, Users, Download } from \"lucide-react\";\nimport IssuesTable from \"../components/admin/issues-table\";\nimport AnalyticsDashboard from \"../components/admin/analytics-dashboard\";\nimport MapView from \"../components/admin/map-view\";\nimport UserManagement from \"../components/admin/user-management\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"issues\");\n\n  // Redirect if not admin/officer\n  if (user?.role === 'CITIZEN') {\n    setLocation(\"/\");\n    return null;\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"ghost\" onClick={() => setLocation(\"/\")} data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\" data-testid=\"button-export-csv\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"issues\" className=\"flex items-center gap-2\" data-testid=\"tab-issues\">\n            <List className=\"h-4 w-4\" />\n            Issues\n          </TabsTrigger>\n          <TabsTrigger value=\"map\" className=\"flex items-center gap-2\" data-testid=\"tab-map\">\n            <Map className=\"h-4 w-4\" />\n            Map View\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\" data-testid=\"tab-analytics\">\n            <BarChart3 className=\"h-4 w-4\" />\n            Analytics\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" className=\"flex items-center gap-2\" data-testid=\"tab-users\">\n            <Users className=\"h-4 w-4\" />\n            Users\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"issues\" className=\"space-y-6\">\n          <IssuesTable />\n        </TabsContent>\n\n        <TabsContent value=\"map\" className=\"space-y-6\">\n          <MapView />\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <AnalyticsDashboard />\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <UserManagement />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":2922},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"../hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiClient } from \"../lib/api\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle, Clock, AlertTriangle, TrendingUp, Plus, Search } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  \n  const { data: stats } = useQuery({\n    queryKey: ['/api/admin/analytics/overview'],\n    queryFn: () => apiClient.getAnalytics(),\n    enabled: user?.role !== 'CITIZEN',\n  });\n\n  const statsCards = [\n    {\n      title: \"Issues Resolved\",\n      value: stats?.byStatus?.RESOLVED || 0,\n      icon: CheckCircle,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\",\n    },\n    {\n      title: \"In Progress\",\n      value: stats?.byStatus?.IN_PROGRESS || 0,\n      icon: Clock,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n    },\n    {\n      title: \"Pending Review\",\n      value: stats?.byStatus?.SUBMITTED || 0,\n      icon: AlertTriangle,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\",\n    },\n    {\n      title: \"Total Issues\",\n      value: stats?.total || 0,\n      icon: TrendingUp,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-50\",\n    },\n  ];\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Hero Section */}\n      <div className=\"text-center py-12 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-xl mb-8\">\n        <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n          Report. Track. Resolve.\n        </h1>\n        <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n          Your voice matters. Help improve our city by reporting civic issues and tracking their resolution in real-time.\n        </p>\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Link href=\"/report\">\n            <Button size=\"lg\" className=\"btn-primary\" data-testid=\"button-report-issue\">\n              <Plus className=\"mr-2 h-5 w-5\" />\n              Report an Issue\n            </Button>\n          </Link>\n          <Link href=\"/track\">\n            <Button size=\"lg\" variant=\"outline\" data-testid=\"button-track-issues\">\n              <Search className=\"mr-2 h-5 w-5\" />\n              Track My Issues\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Quick Stats - Show for all users but different data for different roles */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        {statsCards.map((stat, index) => (\n          <Card key={index} className=\"border border-border\" data-testid={`card-stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid={`text-stat-value-${index}`}>\n                    {stat.value.toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                </div>\n                <div className={`p-3 rounded-full ${stat.bgColor}`}>\n                  <stat.icon className={`h-6 w-6 ${stat.color}`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Recent Issues Map Preview */}\n      <Card className=\"border border-border\">\n        <CardContent className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Recent Issues Near You</h2>\n          {/* Mock map container */}\n          <div className=\"w-full h-64 bg-muted rounded-lg relative overflow-hidden\">\n            <img \n              src=\"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n              alt=\"City map view showing issue locations\" \n              className=\"w-full h-full object-cover\" \n            />\n            \n            {/* Mock issue markers */}\n            <div className=\"absolute top-12 left-16 w-3 h-3 bg-destructive rounded-full animate-pulse\"></div>\n            <div className=\"absolute top-20 right-20 w-3 h-3 bg-warning rounded-full animate-pulse\"></div>\n            <div className=\"absolute bottom-16 left-1/3 w-3 h-3 bg-success rounded-full\"></div>\n            <div className=\"absolute bottom-20 right-1/4 w-3 h-3 bg-primary rounded-full animate-pulse\"></div>\n            \n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"bg-card/90 backdrop-blur-sm px-4 py-2 rounded-lg border border-border\">\n                <p className=\"text-sm text-muted-foreground\">Interactive map will load here</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4929},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"../hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Building2 } from \"lucide-react\";\n\nexport default function Login() {\n  const { login, register, isLoggingIn, isRegistering } = useAuth();\n  \n  const [loginForm, setLoginForm] = useState({ email: \"\", password: \"\" });\n  const [registerForm, setRegisterForm] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      await login({ email: loginForm.email, password: loginForm.password });\n    } catch (error) {\n      // Error handling is done in the useAuth hook\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerForm.password !== registerForm.confirmPassword) {\n      // Show error toast\n      return;\n    }\n\n    try {\n      await register({\n        name: registerForm.name,\n        email: registerForm.email,\n        phone: registerForm.phone || undefined,\n        password: registerForm.password,\n      });\n    } catch (error) {\n      // Error handling is done in the useAuth hook\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 to-secondary/10 p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Building2 className=\"h-8 w-8 text-primary\" />\n            <span className=\"text-2xl font-bold text-primary\">CivicConnect</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Welcome Back</h1>\n          <p className=\"text-muted-foreground\">Sign in to your account or create a new one</p>\n        </div>\n\n        <Card className=\"border border-border\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"text-center\">Get Started</CardTitle>\n            <CardDescription className=\"text-center\">\n              Choose how you'd like to access CivicConnect\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"login\" className=\"space-y-4 mt-6\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-email\">Email</Label>\n                    <Input\n                      id=\"login-email\"\n                      type=\"email\"\n                      placeholder=\"your.email@example.com\"\n                      value={loginForm.email}\n                      onChange={(e) => setLoginForm({ ...loginForm, email: e.target.value })}\n                      required\n                      data-testid=\"input-login-email\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      placeholder=\"Enter your password\"\n                      value={loginForm.password}\n                      onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                      required\n                      data-testid=\"input-login-password\"\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full btn-primary\" \n                    disabled={isLoggingIn}\n                    data-testid=\"button-login-submit\"\n                  >\n                    {isLoggingIn ? \"Signing In...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </TabsContent>\n              \n              <TabsContent value=\"register\" className=\"space-y-4 mt-6\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-name\">Full Name</Label>\n                    <Input\n                      id=\"register-name\"\n                      type=\"text\"\n                      placeholder=\"John Doe\"\n                      value={registerForm.name}\n                      onChange={(e) => setRegisterForm({ ...registerForm, name: e.target.value })}\n                      required\n                      data-testid=\"input-register-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-email\">Email</Label>\n                    <Input\n                      id=\"register-email\"\n                      type=\"email\"\n                      placeholder=\"your.email@example.com\"\n                      value={registerForm.email}\n                      onChange={(e) => setRegisterForm({ ...registerForm, email: e.target.value })}\n                      required\n                      data-testid=\"input-register-email\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-phone\">Phone Number (Optional)</Label>\n                    <Input\n                      id=\"register-phone\"\n                      type=\"tel\"\n                      placeholder=\"+91 98765 43210\"\n                      value={registerForm.phone}\n                      onChange={(e) => setRegisterForm({ ...registerForm, phone: e.target.value })}\n                      data-testid=\"input-register-phone\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-password\">Password</Label>\n                    <Input\n                      id=\"register-password\"\n                      type=\"password\"\n                      placeholder=\"Create a password\"\n                      value={registerForm.password}\n                      onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                      required\n                      data-testid=\"input-register-password\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                    <Input\n                      id=\"register-confirm-password\"\n                      type=\"password\"\n                      placeholder=\"Confirm your password\"\n                      value={registerForm.confirmPassword}\n                      onChange={(e) => setRegisterForm({ ...registerForm, confirmPassword: e.target.value })}\n                      required\n                      data-testid=\"input-register-confirm-password\"\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full btn-primary\" \n                    disabled={isRegistering}\n                    data-testid=\"button-register-submit\"\n                  >\n                    {isRegistering ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          <p>By signing up, you agree to our Terms of Service and Privacy Policy</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8122},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/report-issue.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiClient } from \"../lib/api\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { ArrowLeft, Camera, MapPin, Lightbulb, Check } from \"lucide-react\";\nimport { useToast } from \"../hooks/use-toast\";\n\nexport default function ReportIssue() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState({\n    categoryId: \"\",\n    title: \"\",\n    description: \"\",\n    address: \"\",\n    location: { lat: 0, lng: 0 },\n    priority: \"MEDIUM\",\n    imageUrls: [] as string[],\n  });\n\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n\n  const { data: categories = [] } = useQuery({\n    queryKey: ['/api/catalog/categories'],\n    queryFn: () => apiClient.getCategories(),\n  });\n\n  const { data: wards = [] } = useQuery({\n    queryKey: ['/api/catalog/wards'],\n    queryFn: () => apiClient.getWards(),\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: (files: File[]) => apiClient.uploadFiles(files),\n  });\n\n  const createIssueMutation = useMutation({\n    mutationFn: (issueData: any) => apiClient.createIssue(issueData),\n    onSuccess: () => {\n      toast({\n        title: \"Issue reported successfully!\",\n        description: \"Thank you for reporting this issue. We'll keep you updated on its progress.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/issues/my'] });\n      setLocation(\"/track\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to report issue\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n      if (files.length + selectedFiles.length > 5) {\n        toast({\n          title: \"Too many files\",\n          description: \"You can only upload up to 5 photos.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setSelectedFiles([...selectedFiles, ...files]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(selectedFiles.filter((_, i) => i !== index));\n  };\n\n  const getCurrentLocation = () => {\n    setIsGettingLocation(true);\n    \n    if (!navigator.geolocation) {\n      toast({\n        title: \"Geolocation not supported\",\n        description: \"Please enter your address manually.\",\n        variant: \"destructive\",\n      });\n      setIsGettingLocation(false);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setFormData({\n          ...formData,\n          location: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          },\n        });\n        setIsGettingLocation(false);\n        toast({\n          title: \"Location detected\",\n          description: \"Your current location has been set.\",\n        });\n      },\n      (error) => {\n        console.error(\"Geolocation error:\", error);\n        toast({\n          title: \"Unable to get location\",\n          description: \"Please enter your address manually or check location permissions.\",\n          variant: \"destructive\",\n        });\n        setIsGettingLocation(false);\n      }\n    );\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.categoryId || !formData.title || !formData.description) {\n      toast({\n        title: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Upload files first if any\n      let imageUrls: string[] = [];\n      if (selectedFiles.length > 0) {\n        const uploadResult = await uploadMutation.mutateAsync(selectedFiles);\n        imageUrls = uploadResult.urls;\n      }\n\n      // Create the issue\n      const issueData = {\n        ...formData,\n        imageUrls,\n        location: formData.location.lat !== 0 ? formData.location : undefined,\n      };\n\n      await createIssueMutation.mutateAsync(issueData);\n    } catch (error) {\n      console.error(\"Submit error:\", error);\n    }\n  };\n\n  const categoryIcons: Record<string, string> = {\n    pothole: \"🛣️\",\n    streetlight: \"💡\",\n    garbage: \"🗑️\",\n    water: \"💧\",\n    electricity: \"⚡\",\n    traffic: \"🚦\",\n    parks: \"🌳\",\n    other: \"📝\",\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <Button variant=\"ghost\" onClick={() => setLocation(\"/\")} data-testid=\"button-back\">\n          <ArrowLeft className=\"h-4 w-4\" />\n        </Button>\n        <h1 className=\"text-2xl font-bold\">Report a Civic Issue</h1>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Report Form */}\n        <div className=\"lg:col-span-2\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <Card className=\"border border-border\">\n              <CardHeader>\n                <CardTitle>Issue Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Issue Category */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">Issue Category *</Label>\n                  <Select value={formData.categoryId} onValueChange={(value) => \n                    setFormData({ ...formData, categoryId: value })\n                  }>\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue placeholder=\"Select a category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map((category: any) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          <span className=\"flex items-center gap-2\">\n                            <span>{categoryIcons[category.code] || \"📝\"}</span>\n                            {category.name}\n                          </span>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Issue Title */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Issue Title *</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Brief description of the issue\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    data-testid=\"input-title\"\n                  />\n                </div>\n\n                {/* Detailed Description */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Detailed Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    rows={4}\n                    placeholder=\"Provide more details about the issue, when you noticed it, and how it affects you or others...\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    data-testid=\"textarea-description\"\n                  />\n                </div>\n\n                {/* Location */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Location *</Label>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      id=\"address\"\n                      placeholder=\"Street address or landmark\"\n                      value={formData.address}\n                      onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                      className=\"flex-1\"\n                      data-testid=\"input-address\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"secondary\"\n                      onClick={getCurrentLocation}\n                      disabled={isGettingLocation}\n                      data-testid=\"button-get-location\"\n                    >\n                      <MapPin className=\"mr-2 h-4 w-4\" />\n                      {isGettingLocation ? \"Getting...\" : \"Use GPS\"}\n                    </Button>\n                  </div>\n                  {formData.location.lat !== 0 && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      GPS: {formData.location.lat.toFixed(6)}, {formData.location.lng.toFixed(6)}\n                    </p>\n                  )}\n                </div>\n\n                {/* Photo Upload */}\n                <div className=\"space-y-2\">\n                  <Label>Photos (Optional)</Label>\n                  <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors\">\n                    <Camera className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground mb-2\">Click to upload photos or drag and drop</p>\n                    <p className=\"text-xs text-muted-foreground\">PNG, JPG up to 10MB each. Max 5 photos.</p>\n                    <input\n                      type=\"file\"\n                      multiple\n                      accept=\"image/*\"\n                      onChange={handleFileChange}\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                      data-testid=\"input-file-upload\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"mt-4\"\n                      onClick={() => document.getElementById('file-upload')?.click()}\n                    >\n                      Select Files\n                    </Button>\n                  </div>\n                  \n                  {selectedFiles.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-medium\">Selected files:</p>\n                      {selectedFiles.map((file, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-2 border border-border rounded\">\n                          <span className=\"text-sm\">{file.name}</span>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeFile(index)}\n                            data-testid={`button-remove-file-${index}`}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Priority Level */}\n                <div className=\"space-y-3\">\n                  <Label>Priority Level</Label>\n                  <RadioGroup\n                    value={formData.priority}\n                    onValueChange={(value) => setFormData({ ...formData, priority: value })}\n                  >\n                    <div className=\"grid grid-cols-3 gap-3\">\n                      <Label className=\"flex items-center p-3 border border-border rounded-lg cursor-pointer hover:bg-accent\">\n                        <RadioGroupItem value=\"LOW\" className=\"mr-3\" />\n                        <div>\n                          <div className=\"font-medium text-green-600\">Low</div>\n                          <div className=\"text-xs text-muted-foreground\">Non-urgent</div>\n                        </div>\n                      </Label>\n                      <Label className=\"flex items-center p-3 border border-border rounded-lg cursor-pointer hover:bg-accent\">\n                        <RadioGroupItem value=\"MEDIUM\" className=\"mr-3\" />\n                        <div>\n                          <div className=\"font-medium text-orange-600\">Medium</div>\n                          <div className=\"text-xs text-muted-foreground\">Standard</div>\n                        </div>\n                      </Label>\n                      <Label className=\"flex items-center p-3 border border-border rounded-lg cursor-pointer hover:bg-accent\">\n                        <RadioGroupItem value=\"HIGH\" className=\"mr-3\" />\n                        <div>\n                          <div className=\"font-medium text-red-600\">High</div>\n                          <div className=\"text-xs text-muted-foreground\">Urgent</div>\n                        </div>\n                      </Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n\n                {/* Submit Button */}\n                <div className=\"flex justify-end space-x-3 pt-6 border-t border-border\">\n                  <Button \n                    type=\"submit\" \n                    className=\"btn-primary\" \n                    disabled={createIssueMutation.isPending || uploadMutation.isPending}\n                    data-testid=\"button-submit-issue\"\n                  >\n                    {createIssueMutation.isPending || uploadMutation.isPending ? (\n                      \"Submitting...\"\n                    ) : (\n                      <>\n                        <Check className=\"mr-2 h-4 w-4\" />\n                        Submit Report\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </form>\n        </div>\n\n        {/* Sidebar Info */}\n        <div className=\"space-y-6\">\n          {/* Tips Card */}\n          <Card className=\"border border-border\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Lightbulb className=\"mr-2 h-5 w-5 text-secondary\" />\n                Reporting Tips\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-3 text-sm\">\n                <li className=\"flex items-start\">\n                  <Check className=\"text-success mt-1 mr-2 h-3 w-3\" />\n                  <span>Include clear photos from multiple angles</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Check className=\"text-success mt-1 mr-2 h-3 w-3\" />\n                  <span>Provide exact location details</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Check className=\"text-success mt-1 mr-2 h-3 w-3\" />\n                  <span>Describe the impact on daily life</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Check className=\"text-success mt-1 mr-2 h-3 w-3\" />\n                  <span>Be specific about the problem</span>\n                </li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          {/* SLA Information */}\n          <Card className=\"border border-border\">\n            <CardHeader>\n              <CardTitle>Expected Resolution Times</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Potholes</span>\n                  <span className=\"text-muted-foreground\">7-14 days</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Street Lights</span>\n                  <span className=\"text-muted-foreground\">3-5 days</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Garbage</span>\n                  <span className=\"text-muted-foreground\">1-2 days</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Water Issues</span>\n                  <span className=\"text-muted-foreground\">2-4 days</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16689},"client/src/pages/track-issues.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiClient } from \"../lib/api\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, Search, Eye, MessageSquare, Star } from \"lucide-react\";\nimport { Issue } from \"../types\";\nimport IssueCard from \"../components/issues/issue-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function TrackIssues() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [page, setPage] = useState(1);\n\n  const { data: issuesData, isLoading } = useQuery({\n    queryKey: ['/api/issues/my', { page, status: statusFilter, search: searchQuery }],\n    queryFn: () => apiClient.getMyIssues({ \n      page, \n      limit: 10, \n      status: statusFilter || undefined \n    }),\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: ['/api/catalog/categories'],\n    queryFn: () => apiClient.getCategories(),\n  });\n\n  const handleSearch = () => {\n    setPage(1);\n    // Query will automatically refetch due to searchQuery dependency\n  };\n\n  const issues = issuesData?.issues || [];\n  const total = issuesData?.total || 0;\n  const totalPages = Math.ceil(total / 10);\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center space-x-3\">\n            <Skeleton className=\"h-10 w-10\" />\n            <Skeleton className=\"h-8 w-48\" />\n          </div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Skeleton key={i} className=\"h-48 w-full\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"ghost\" onClick={() => setLocation(\"/\")} data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <h1 className=\"text-2xl font-bold\">Track Your Issues</h1>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Input\n            type=\"text\"\n            placeholder=\"Search by ticket number...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-64\"\n            data-testid=\"input-search\"\n          />\n          <Button onClick={handleSearch} data-testid=\"button-search\">\n            <Search className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-wrap gap-3\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Statuses\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Statuses</SelectItem>\n                <SelectItem value=\"SUBMITTED\">Submitted</SelectItem>\n                <SelectItem value=\"TRIAGED\">Triaged</SelectItem>\n                <SelectItem value=\"ASSIGNED\">Assigned</SelectItem>\n                <SelectItem value=\"IN_PROGRESS\">In Progress</SelectItem>\n                <SelectItem value=\"RESOLVED\">Resolved</SelectItem>\n                <SelectItem value=\"REJECTED\">Rejected</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-category-filter\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Categories</SelectItem>\n                {categories.map((category: any) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Issues List */}\n      <div className=\"space-y-4\">\n        {issues.length === 0 ? (\n          <Card className=\"border border-border\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"text-muted-foreground\">\n                <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-medium mb-2\">No issues found</h3>\n                <p>You haven't reported any issues yet, or none match your current filters.</p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          issues.map((issue: Issue) => (\n            <IssueCard key={issue.id} issue={issue} showActions />\n          ))\n        )}\n      </div>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"flex justify-center mt-8\">\n          <nav className=\"flex space-x-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setPage(page - 1)} \n              disabled={page === 1}\n              data-testid=\"button-previous-page\"\n            >\n              Previous\n            </Button>\n            \n            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n              const pageNum = i + 1;\n              return (\n                <Button\n                  key={pageNum}\n                  variant={page === pageNum ? \"default\" : \"outline\"}\n                  onClick={() => setPage(pageNum)}\n                  data-testid={`button-page-${pageNum}`}\n                >\n                  {pageNum}\n                </Button>\n              );\n            })}\n            \n            <Button \n              variant=\"outline\" \n              onClick={() => setPage(page + 1)} \n              disabled={page === totalPages}\n              data-testid=\"button-next-page\"\n            >\n              Next\n            </Button>\n          </nav>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6567},"client/src/types/index.ts":{"content":"export type UserRole = 'CITIZEN' | 'OFFICER' | 'SUPERVISOR' | 'ADMIN';\n\nexport type IssueStatus = \n  | 'DRAFT' \n  | 'SUBMITTED' \n  | 'TRIAGED' \n  | 'ASSIGNED' \n  | 'IN_PROGRESS' \n  | 'PENDING_USER_INFO' \n  | 'RESOLVED' \n  | 'REJECTED';\n\nexport type IssuePriority = 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  phone?: string;\n  role: UserRole;\n  wardId?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Category {\n  id: string;\n  name: string;\n  code: string;\n  icon?: string;\n  slaHours: number;\n  priorityWeight: number;\n  departmentId: string;\n}\n\nexport interface Ward {\n  id: string;\n  name: string;\n  code: string;\n  geojson?: any;\n}\n\nexport interface Department {\n  id: string;\n  name: string;\n  code: string;\n  email?: string;\n  phone?: string;\n}\n\nexport interface Issue {\n  id: string;\n  ticketNo: string;\n  title: string;\n  description: string;\n  categoryId: string;\n  wardId?: string;\n  departmentId?: string;\n  reporterId: string;\n  assigneeId?: string;\n  status: IssueStatus;\n  priority?: IssuePriority;\n  priorityScore?: number;\n  location?: {\n    lat: number;\n    lng: number;\n  };\n  address?: string;\n  imageUrls: string[];\n  videoUrls: string[];\n  duplicateOfIssueId?: string;\n  rejectedReason?: string;\n  resolvedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n  category?: Category;\n  ward?: Ward;\n  department?: Department;\n  reporter?: User;\n  assignee?: User;\n  comments?: Comment[];\n}\n\nexport interface Comment {\n  id: string;\n  issueId: string;\n  authorId: string;\n  body: string;\n  attachments: string[];\n  createdAt: string;\n  author?: User;\n}\n\nexport interface ApiResponse<T = any> {\n  data?: T;\n  message?: string;\n  error?: string;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T;\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\nexport interface IssueStats {\n  total: number;\n  byStatus: Record<string, number>;\n  byPriority: Record<string, number>;\n  byCategory: Record<string, number>;\n  byWard: Record<string, number>;\n}\n","size_bytes":2104},"client/src/components/admin/analytics-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { apiClient } from \"../../lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, Clock, AlertTriangle, TrendingUp } from \"lucide-react\";\n\nexport default function AnalyticsDashboard() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/admin/analytics/overview'],\n    queryFn: () => apiClient.getAnalytics(),\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {[1, 2, 3, 4].map((i) => (\n          <Card key={i} className=\"border border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-2 bg-muted rounded\"></div>\n                  <div className=\"h-2 bg-muted rounded w-2/3\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const statsCards = [\n    {\n      title: \"Critical Issues\",\n      value: stats?.byStatus?.SUBMITTED || 0,\n      icon: AlertTriangle,\n      color: \"text-red-600\",\n      bgColor: \"bg-red-50\",\n    },\n    {\n      title: \"Pending Review\",\n      value: stats?.byStatus?.TRIAGED || 0,\n      icon: Clock,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n    },\n    {\n      title: \"In Progress\",\n      value: stats?.byStatus?.IN_PROGRESS || 0,\n      icon: TrendingUp,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\",\n    },\n    {\n      title: \"Resolved Today\",\n      value: stats?.byStatus?.RESOLVED || 0,\n      icon: CheckCircle,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\",\n    },\n  ];\n\n  const categoryData = Object.entries(stats?.byCategory || {});\n  const wardData = Object.entries(stats?.byWard || {});\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        {statsCards.map((stat, index) => (\n          <Card key={index} className=\"border border-border\" data-testid={`card-stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid={`text-stat-value-${index}`}>\n                    {stat.value.toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                </div>\n                <div className={`p-3 rounded-full ${stat.bgColor} dark:bg-opacity-20`}>\n                  <stat.icon className={`h-6 w-6 ${stat.color}`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Resolution Times Chart */}\n        <Card className=\"border border-border\">\n          <CardHeader>\n            <CardTitle>Average Resolution Times</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\" data-testid=\"resolution-times-chart\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Potholes</span>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={75} className=\"w-32\" />\n                  <span className=\"text-sm text-muted-foreground\">7.2 days</span>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Street Lights</span>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={45} className=\"w-32\" />\n                  <span className=\"text-sm text-muted-foreground\">2.1 days</span>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Garbage</span>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={30} className=\"w-32\" />\n                  <span className=\"text-sm text-muted-foreground\">1.3 days</span>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Water Issues</span>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={90} className=\"w-32\" />\n                  <span className=\"text-sm text-muted-foreground\">9.8 days</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Issue Volume by Ward */}\n        <Card className=\"border border-border\">\n          <CardHeader>\n            <CardTitle>Issues by Ward (Last 30 Days)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\" data-testid=\"ward-stats\">\n              {wardData.slice(0, 5).map(([ward, count], index) => (\n                <div key={ward} className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">{ward}</span>\n                  <span className=\"text-sm font-medium\" data-testid={`ward-count-${index}`}>\n                    {count as number} issues\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* SLA Performance */}\n        <Card className=\"border border-border\">\n          <CardHeader>\n            <CardTitle>SLA Performance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-600 mb-2\" data-testid=\"sla-compliance-rate\">\n                  95%\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Overall SLA Compliance</p>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Within SLA</span>\n                  <span className=\"text-green-600\" data-testid=\"sla-within-count\">\n                    {stats?.byStatus?.RESOLVED || 0} issues\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Breached SLA</span>\n                  <span className=\"text-red-600\" data-testid=\"sla-breached-count\">\n                    {Math.floor((stats?.total || 0) * 0.05)} issues\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Critical Overdue</span>\n                  <span className=\"text-red-600 font-medium\" data-testid=\"sla-critical-count\">\n                    {Math.floor((stats?.total || 0) * 0.01)} issues\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Category Breakdown */}\n        <Card className=\"border border-border\">\n          <CardHeader>\n            <CardTitle>Issues by Category</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\" data-testid=\"category-stats\">\n              {categoryData.slice(0, 5).map(([category, count], index) => (\n                <div key={category} className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">{category}</span>\n                  <span className=\"text-sm font-medium\" data-testid={`category-count-${index}`}>\n                    {count as number} issues\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8126},"client/src/components/admin/issues-table.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiClient } from \"../../lib/api\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Edit, Eye, UserPlus } from \"lucide-react\";\nimport StatusBadge from \"../issues/status-badge\";\nimport { Issue } from \"../../types\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"../../hooks/use-toast\";\n\nexport default function IssuesTable() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [filters, setFilters] = useState({\n    status: \"\",\n    categoryId: \"\",\n    priority: \"\",\n    search: \"\",\n    page: 1,\n    limit: 10,\n  });\n  \n  const [selectedIssues, setSelectedIssues] = useState<string[]>([]);\n\n  const { data: issuesData, isLoading } = useQuery({\n    queryKey: ['/api/admin/issues', filters],\n    queryFn: () => apiClient.getAdminIssues(filters),\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: ['/api/catalog/categories'],\n    queryFn: () => apiClient.getCategories(),\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: ['/api/admin/users'],\n    queryFn: () => apiClient.getUsers(),\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ issueId, status, rejectedReason }: { \n      issueId: string; \n      status: string; \n      rejectedReason?: string; \n    }) => apiClient.updateIssueStatus(issueId, status, rejectedReason),\n    onSuccess: () => {\n      toast({\n        title: \"Status updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/issues'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update status\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const assignIssueMutation = useMutation({\n    mutationFn: ({ issueId, assigneeId }: { issueId: string; assigneeId: string }) =>\n      apiClient.assignIssue(issueId, assigneeId),\n    onSuccess: () => {\n      toast({\n        title: \"Issue assigned successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/issues'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to assign issue\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSearch = () => {\n    setFilters({ ...filters, page: 1 });\n  };\n\n  const handleSelectIssue = (issueId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedIssues([...selectedIssues, issueId]);\n    } else {\n      setSelectedIssues(selectedIssues.filter(id => id !== issueId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedIssues(issues.map((issue: Issue) => issue.id));\n    } else {\n      setSelectedIssues([]);\n    }\n  };\n\n  const issues = issuesData?.issues || [];\n  const total = issuesData?.total || 0;\n  const totalPages = Math.ceil(total / filters.limit);\n\n  const getPriorityColor = (priority?: string) => {\n    switch (priority) {\n      case 'HIGH': return 'border-red-500 text-red-700';\n      case 'MEDIUM': return 'border-yellow-500 text-yellow-700';\n      case 'LOW': return 'border-green-500 text-green-700';\n      case 'CRITICAL': return 'border-red-700 text-red-800';\n      default: return 'border-gray-500 text-gray-700';\n    }\n  };\n\n  return (\n    <Card className=\"border border-border\">\n      {/* Filters Bar */}\n      <CardContent className=\"p-4 border-b border-border\">\n        <div className=\"flex flex-wrap gap-3\">\n          <Select value={filters.status} onValueChange={(value) => setFilters({ ...filters, status: value })}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n              <SelectValue placeholder=\"All Statuses\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All Statuses</SelectItem>\n              <SelectItem value=\"SUBMITTED\">Submitted</SelectItem>\n              <SelectItem value=\"TRIAGED\">Triaged</SelectItem>\n              <SelectItem value=\"ASSIGNED\">Assigned</SelectItem>\n              <SelectItem value=\"IN_PROGRESS\">In Progress</SelectItem>\n              <SelectItem value=\"RESOLVED\">Resolved</SelectItem>\n              <SelectItem value=\"REJECTED\">Rejected</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Select value={filters.categoryId} onValueChange={(value) => setFilters({ ...filters, categoryId: value })}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-category-filter\">\n              <SelectValue placeholder=\"All Categories\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All Categories</SelectItem>\n              {categories.map((category: any) => (\n                <SelectItem key={category.id} value={category.id}>\n                  {category.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <Select value={filters.priority} onValueChange={(value) => setFilters({ ...filters, priority: value })}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-priority-filter\">\n              <SelectValue placeholder=\"All Priorities\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All Priorities</SelectItem>\n              <SelectItem value=\"HIGH\">High</SelectItem>\n              <SelectItem value=\"MEDIUM\">Medium</SelectItem>\n              <SelectItem value=\"LOW\">Low</SelectItem>\n              <SelectItem value=\"CRITICAL\">Critical</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Input\n            placeholder=\"Search issues...\"\n            value={filters.search}\n            onChange={(e) => setFilters({ ...filters, search: e.target.value })}\n            className=\"w-64\"\n            data-testid=\"input-search\"\n          />\n          \n          <Button onClick={handleSearch} data-testid=\"button-search\">\n            <Search className=\"mr-2 h-4 w-4\" />\n            Search\n          </Button>\n        </div>\n      </CardContent>\n\n      {/* Issues Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted\">\n            <tr>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                <Checkbox\n                  checked={selectedIssues.length === issues.length && issues.length > 0}\n                  onCheckedChange={handleSelectAll}\n                  data-testid=\"checkbox-select-all\"\n                />\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Ticket\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Issue\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Category\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Status\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Priority\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Assigned To\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Created\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {issues.map((issue: Issue) => (\n              <tr key={issue.id} className=\"hover:bg-accent/50 transition-colors\" data-testid={`row-issue-${issue.ticketNo}`}>\n                <td className=\"px-4 py-4\">\n                  <Checkbox\n                    checked={selectedIssues.includes(issue.id)}\n                    onCheckedChange={(checked) => handleSelectIssue(issue.id, checked as boolean)}\n                    data-testid={`checkbox-issue-${issue.id}`}\n                  />\n                </td>\n                <td className=\"px-4 py-4 text-sm font-mono\" data-testid={`text-ticket-${issue.id}`}>\n                  {issue.ticketNo}\n                </td>\n                <td className=\"px-4 py-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    {issue.imageUrls && issue.imageUrls.length > 0 && (\n                      <img \n                        src={issue.imageUrls[0]} \n                        alt=\"Issue thumbnail\" \n                        className=\"w-8 h-8 rounded object-cover\"\n                      />\n                    )}\n                    <div>\n                      <p className=\"text-sm font-medium\" data-testid={`text-title-${issue.id}`}>\n                        {issue.title}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {issue.address}\n                      </p>\n                    </div>\n                  </div>\n                </td>\n                <td className=\"px-4 py-4 text-sm\" data-testid={`text-category-${issue.id}`}>\n                  {issue.category?.name}\n                </td>\n                <td className=\"px-4 py-4\">\n                  <StatusBadge status={issue.status} />\n                </td>\n                <td className=\"px-4 py-4\">\n                  {issue.priority && (\n                    <Badge variant=\"outline\" className={`text-xs ${getPriorityColor(issue.priority)}`}>\n                      {issue.priority}\n                    </Badge>\n                  )}\n                </td>\n                <td className=\"px-4 py-4 text-sm\" data-testid={`text-assignee-${issue.id}`}>\n                  {issue.assignee?.name || 'Unassigned'}\n                </td>\n                <td className=\"px-4 py-4 text-sm text-muted-foreground\">\n                  {format(new Date(issue.createdAt), 'MMM d, yyyy')}\n                </td>\n                <td className=\"px-4 py-4\">\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-${issue.id}`}>\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${issue.id}`}>\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" data-testid={`button-assign-${issue.id}`}>\n                      <UserPlus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Bulk Actions & Pagination */}\n      <CardContent className=\"p-4 border-t border-border flex justify-between items-center\">\n        <div className=\"flex items-center space-x-3\">\n          <span className=\"text-sm text-muted-foreground\" data-testid=\"text-selected-count\">\n            {selectedIssues.length} items selected\n          </span>\n          <Button variant=\"outline\" size=\"sm\" disabled={selectedIssues.length === 0} data-testid=\"button-bulk-assign\">\n            Bulk Assign\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" disabled={selectedIssues.length === 0} data-testid=\"button-bulk-status\">\n            Bulk Status\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" disabled={selectedIssues.length === 0} data-testid=\"button-export-selected\">\n            Export Selected\n          </Button>\n        </div>\n        \n        {totalPages > 1 && (\n          <nav className=\"flex space-x-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setFilters({ ...filters, page: filters.page - 1 })} \n              disabled={filters.page === 1}\n              data-testid=\"button-previous-page\"\n            >\n              Previous\n            </Button>\n            \n            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n              const pageNum = i + 1;\n              return (\n                <Button\n                  key={pageNum}\n                  variant={filters.page === pageNum ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFilters({ ...filters, page: pageNum })}\n                  data-testid={`button-page-${pageNum}`}\n                >\n                  {pageNum}\n                </Button>\n              );\n            })}\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setFilters({ ...filters, page: filters.page + 1 })} \n              disabled={filters.page === totalPages}\n              data-testid=\"button-next-page\"\n            >\n              Next\n            </Button>\n          </nav>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13732},"client/src/components/admin/map-view.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiClient } from \"../../lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RefreshCw, Plus, Minus } from \"lucide-react\";\n\nexport default function MapView() {\n  const [issueFilter, setIssueFilter] = useState(\"\");\n\n  const { data: issues, isLoading, refetch } = useQuery({\n    queryKey: ['/api/admin/issues', { status: issueFilter }],\n    queryFn: () => apiClient.getAdminIssues({ status: issueFilter }),\n  });\n\n  const handleRefresh = () => {\n    refetch();\n  };\n\n  return (\n    <Card className=\"border border-border\">\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>Issue Locations</CardTitle>\n          <div className=\"flex space-x-3\">\n            <Select value={issueFilter} onValueChange={setIssueFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-map-filter\">\n                <SelectValue placeholder=\"All Issues\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Issues</SelectItem>\n                <SelectItem value=\"HIGH\">High Priority</SelectItem>\n                <SelectItem value=\"SUBMITTED\">Overdue</SelectItem>\n                <SelectItem value=\"\">Unassigned</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button onClick={handleRefresh} disabled={isLoading} data-testid=\"button-refresh-map\">\n              <RefreshCw className={`mr-2 h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Map Container */}\n        <div className=\"w-full h-96 bg-muted rounded-lg relative overflow-hidden\" data-testid=\"map-container\">\n          {/* Mock map with clusters */}\n          <img \n            src=\"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n            alt=\"Satellite city map showing issue locations\" \n            className=\"w-full h-full object-cover\" \n          />\n          \n          {/* Issue clusters - positions based on actual issue data */}\n          <div className=\"absolute top-16 left-20 w-8 h-8 bg-red-500 rounded-full flex items-center justify-center text-white text-sm font-medium animate-pulse\" data-testid=\"cluster-critical\">\n            {Math.min(issues?.issues?.filter((i: any) => i.priority === 'HIGH').length || 3, 9)}\n          </div>\n          <div className=\"absolute top-24 right-24 w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center text-white text-xs font-medium animate-pulse\" data-testid=\"cluster-warning\">\n            {Math.min(issues?.issues?.filter((i: any) => i.status === 'IN_PROGRESS').length || 2, 9)}\n          </div>\n          <div className=\"absolute bottom-20 left-32 w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-medium animate-pulse\" data-testid=\"cluster-pending\">\n            {Math.min(issues?.issues?.filter((i: any) => i.status === 'SUBMITTED').length || 5, 99)}\n          </div>\n          <div className=\"absolute bottom-32 right-20 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center text-white text-xs\" data-testid=\"cluster-resolved\">\n            {Math.min(issues?.issues?.filter((i: any) => i.status === 'RESOLVED').length || 1, 9)}\n          </div>\n          \n          {/* Map controls */}\n          <div className=\"absolute top-4 right-4 space-y-2\">\n            <Button variant=\"outline\" size=\"sm\" className=\"bg-card border border-border p-2 rounded shadow-sm hover:bg-accent\" data-testid=\"button-zoom-in\">\n              <Plus className=\"h-3 w-3\" />\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"bg-card border border-border p-2 rounded shadow-sm hover:bg-accent\" data-testid=\"button-zoom-out\">\n              <Minus className=\"h-3 w-3\" />\n            </Button>\n          </div>\n          \n          {/* Legend */}\n          <div className=\"absolute bottom-4 left-4 bg-card/90 backdrop-blur-sm border border-border rounded-lg p-3\" data-testid=\"map-legend\">\n            <h4 className=\"text-sm font-medium mb-2\">Issue Status</h4>\n            <div className=\"space-y-1 text-xs\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                <span>Critical/Overdue</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-orange-500 rounded-full\"></div>\n                <span>In Progress</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                <span>Pending</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                <span>Recently Resolved</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Loading overlay */}\n          {isLoading && (\n            <div className=\"absolute inset-0 bg-background/50 flex items-center justify-center\">\n              <div className=\"bg-card border border-border rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                  <span className=\"text-sm\">Loading map data...</span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Map Stats */}\n        <div className=\"mt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n          <div className=\"p-3 border border-border rounded-lg\">\n            <div className=\"text-lg font-semibold text-red-600\" data-testid=\"map-stat-critical\">\n              {issues?.issues?.filter((i: any) => i.priority === 'HIGH').length || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Critical</div>\n          </div>\n          <div className=\"p-3 border border-border rounded-lg\">\n            <div className=\"text-lg font-semibold text-orange-600\" data-testid=\"map-stat-progress\">\n              {issues?.issues?.filter((i: any) => i.status === 'IN_PROGRESS').length || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">In Progress</div>\n          </div>\n          <div className=\"p-3 border border-border rounded-lg\">\n            <div className=\"text-lg font-semibold text-blue-600\" data-testid=\"map-stat-pending\">\n              {issues?.issues?.filter((i: any) => i.status === 'SUBMITTED').length || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Pending</div>\n          </div>\n          <div className=\"p-3 border border-border rounded-lg\">\n            <div className=\"text-lg font-semibold text-green-600\" data-testid=\"map-stat-resolved\">\n              {issues?.issues?.filter((i: any) => i.status === 'RESOLVED').length || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Resolved</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7450},"client/src/components/admin/user-management.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { apiClient } from \"../../lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { UserPlus, Edit, Eye } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function UserManagement() {\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/users'],\n    queryFn: () => apiClient.getUsers(),\n  });\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'ADMIN':\n        return 'bg-purple-100 text-purple-800 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400';\n      case 'SUPERVISOR':\n        return 'bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'OFFICER':\n        return 'bg-green-100 text-green-800 border-green-200 dark:bg-green-900/20 dark:text-green-400';\n      case 'CITIZEN':\n        return 'bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-900/20 dark:text-gray-400';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"border border-border\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <div key={i} className=\"flex items-center space-x-4\">\n                <div className=\"h-10 w-10 bg-muted rounded-full\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                </div>\n                <div className=\"h-6 w-16 bg-muted rounded\"></div>\n                <div className=\"h-8 w-24 bg-muted rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border border-border\">\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>User Management</CardTitle>\n          <Button data-testid=\"button-add-user\">\n            <UserPlus className=\"mr-2 h-4 w-4\" />\n            Add User\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted\">\n              <tr>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Name\n                </th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Email\n                </th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Role\n                </th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Issues Handled\n                </th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Last Active\n                </th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {users.map((user: any) => (\n                <tr key={user.id} className=\"hover:bg-accent/50 transition-colors\" data-testid={`row-user-${user.id}`}>\n                  <td className=\"px-4 py-4 text-sm font-medium\" data-testid={`text-user-name-${user.id}`}>\n                    {user.name}\n                  </td>\n                  <td className=\"px-4 py-4 text-sm\" data-testid={`text-user-email-${user.id}`}>\n                    {user.email}\n                  </td>\n                  <td className=\"px-4 py-4\">\n                    <Badge variant=\"outline\" className={`text-xs ${getRoleBadgeColor(user.role)}`}>\n                      {user.role}\n                    </Badge>\n                  </td>\n                  <td className=\"px-4 py-4 text-sm\" data-testid={`text-user-issues-${user.id}`}>\n                    {user.issueCount || 0}\n                  </td>\n                  <td className=\"px-4 py-4 text-sm text-muted-foreground\">\n                    {user.updatedAt ? format(new Date(user.updatedAt), 'MMM d, yyyy') : 'Never'}\n                  </td>\n                  <td className=\"px-4 py-4\">\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-user-${user.id}`}>\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-user-${user.id}`}>\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {users.length === 0 && (\n          <div className=\"text-center py-12\">\n            <UserPlus className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No users found</h3>\n            <p className=\"text-muted-foreground mb-4\">Get started by adding your first team member.</p>\n            <Button data-testid=\"button-add-first-user\">\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Add First User\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5905},"client/src/components/issues/issue-card.tsx":{"content":"import { Issue } from \"../../types\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare, Eye, Star, MapPin, Calendar } from \"lucide-react\";\nimport StatusBadge from \"./status-badge\";\nimport { format } from \"date-fns\";\n\ninterface IssueCardProps {\n  issue: Issue;\n  showActions?: boolean;\n  onViewDetails?: (issue: Issue) => void;\n  onAddComment?: (issue: Issue) => void;\n  onRate?: (issue: Issue) => void;\n}\n\nexport default function IssueCard({ \n  issue, \n  showActions = false, \n  onViewDetails, \n  onAddComment, \n  onRate \n}: IssueCardProps) {\n  const getPriorityClass = (priority?: string) => {\n    switch (priority) {\n      case 'HIGH': return 'priority-high';\n      case 'MEDIUM': return 'priority-medium';\n      case 'LOW': return 'priority-low';\n      case 'CRITICAL': return 'priority-critical';\n      default: return '';\n    }\n  };\n\n  const getStatusSteps = () => {\n    const steps = [\n      { key: 'SUBMITTED', label: 'Submitted', completed: false },\n      { key: 'TRIAGED', label: 'Triaged', completed: false },\n      { key: 'ASSIGNED', label: 'Assigned', completed: false },\n      { key: 'IN_PROGRESS', label: 'In Progress', completed: false },\n      { key: 'RESOLVED', label: 'Resolved', completed: false },\n    ];\n\n    const statusOrder = ['SUBMITTED', 'TRIAGED', 'ASSIGNED', 'IN_PROGRESS', 'RESOLVED'];\n    const currentIndex = statusOrder.indexOf(issue.status);\n\n    steps.forEach((step, index) => {\n      if (index <= currentIndex) {\n        step.completed = true;\n      }\n      if (index === currentIndex) {\n        step.label = step.label; // Current step\n      }\n    });\n\n    return steps;\n  };\n\n  const statusSteps = getStatusSteps();\n\n  return (\n    <Card className={`border border-border ${getPriorityClass(issue.priority)}`} data-testid={`card-issue-${issue.ticketNo}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-4\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <h3 className=\"font-semibold text-lg\" data-testid={`text-issue-title-${issue.id}`}>\n                {issue.title}\n              </h3>\n              <StatusBadge status={issue.status} />\n              {issue.priority && (\n                <Badge variant=\"outline\" className={`text-xs ${\n                  issue.priority === 'HIGH' ? 'border-red-500 text-red-700' :\n                  issue.priority === 'MEDIUM' ? 'border-yellow-500 text-yellow-700' :\n                  issue.priority === 'LOW' ? 'border-green-500 text-green-700' :\n                  'border-red-700 text-red-800'\n                }`}>\n                  {issue.priority}\n                </Badge>\n              )}\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-issue-ticket-${issue.id}`}>\n              Ticket #{issue.ticketNo} • {issue.category?.name}\n            </p>\n            <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <MapPin className=\"h-3 w-3\" />\n                <span>{issue.address || 'Location not specified'}</span>\n              </div>\n              {issue.ward && (\n                <span>Ward: {issue.ward.name}</span>\n              )}\n            </div>\n          </div>\n          <div className=\"text-right text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-1 mb-1\">\n              <Calendar className=\"h-3 w-3\" />\n              <span>Reported: {format(new Date(issue.createdAt), 'MMM d, yyyy')}</span>\n            </div>\n            <p>Updated: {format(new Date(issue.updatedAt), 'MMM d, yyyy')}</p>\n          </div>\n        </div>\n\n        {/* Progress Timeline */}\n        <div className=\"mb-4\">\n          <div className=\"flex items-center space-x-4 text-sm\">\n            {statusSteps.map((step, index) => (\n              <div key={step.key} className=\"flex items-center space-x-2\">\n                <div className={`w-3 h-3 rounded-full ${\n                  step.completed ? 'bg-success' : \n                  step.key === issue.status ? 'bg-warning animate-pulse' : \n                  'bg-muted'\n                }`}></div>\n                <span className={\n                  step.completed ? 'text-success' : \n                  step.key === issue.status ? 'text-warning font-medium' : \n                  'text-muted-foreground'\n                }>\n                  {step.label}\n                </span>\n                {index < statusSteps.length - 1 && (\n                  <div className=\"w-4 h-px bg-border\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Latest Update */}\n        {issue.status === 'IN_PROGRESS' && (\n          <div className=\"bg-accent p-3 rounded-lg mb-4\">\n            <p className=\"text-sm font-medium\">Latest Update:</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Work is currently in progress. We'll keep you updated on the status.\n            </p>\n          </div>\n        )}\n\n        {issue.status === 'RESOLVED' && issue.resolvedAt && (\n          <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 p-3 rounded-lg mb-4\">\n            <p className=\"text-sm font-medium text-green-800 dark:text-green-400\">Issue Resolved</p>\n            <p className=\"text-sm text-green-700 dark:text-green-300\">\n              Resolved on {format(new Date(issue.resolvedAt), 'MMM d, yyyy')}. Thank you for reporting this issue!\n            </p>\n          </div>\n        )}\n\n        {issue.status === 'REJECTED' && issue.rejectedReason && (\n          <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 p-3 rounded-lg mb-4\">\n            <p className=\"text-sm font-medium text-red-800 dark:text-red-400\">Issue Rejected</p>\n            <p className=\"text-sm text-red-700 dark:text-red-300\">{issue.rejectedReason}</p>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        {showActions && (\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex space-x-2\">\n              {issue.imageUrls && issue.imageUrls.length > 0 && (\n                <div className=\"flex items-center space-x-2\">\n                  <img \n                    src={issue.imageUrls[0]} \n                    alt=\"Issue thumbnail\" \n                    className=\"w-8 h-8 rounded object-cover\"\n                    data-testid={`img-thumbnail-${issue.id}`}\n                  />\n                  {issue.imageUrls.length > 1 && (\n                    <span className=\"text-xs text-muted-foreground\">\n                      +{issue.imageUrls.length - 1} more\n                    </span>\n                  )}\n                </div>\n              )}\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => onAddComment?.(issue)}\n                data-testid={`button-comment-${issue.id}`}\n              >\n                <MessageSquare className=\"mr-1 h-3 w-3\" />\n                Comment\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => onViewDetails?.(issue)}\n                data-testid={`button-view-details-${issue.id}`}\n              >\n                <Eye className=\"mr-1 h-3 w-3\" />\n                View Details\n              </Button>\n              {issue.status === 'RESOLVED' && (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => onRate?.(issue)}\n                  data-testid={`button-rate-${issue.id}`}\n                >\n                  <Star className=\"mr-1 h-3 w-3\" />\n                  Rate\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8120},"client/src/components/issues/issue-form.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiClient } from \"../../lib/api\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Camera, MapPin } from \"lucide-react\";\nimport { useToast } from \"../../hooks/use-toast\";\n\ninterface IssueFormProps {\n  onSubmit: (data: any) => void;\n  isSubmitting?: boolean;\n}\n\nexport default function IssueForm({ onSubmit, isSubmitting = false }: IssueFormProps) {\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    categoryId: \"\",\n    title: \"\",\n    description: \"\",\n    address: \"\",\n    location: { lat: 0, lng: 0 },\n    priority: \"MEDIUM\",\n  });\n\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n\n  const { data: categories = [] } = useQuery({\n    queryKey: ['/api/catalog/categories'],\n    queryFn: () => apiClient.getCategories(),\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n      if (files.length + selectedFiles.length > 5) {\n        toast({\n          title: \"Too many files\",\n          description: \"You can only upload up to 5 photos.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setSelectedFiles([...selectedFiles, ...files]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(selectedFiles.filter((_, i) => i !== index));\n  };\n\n  const getCurrentLocation = () => {\n    setIsGettingLocation(true);\n    \n    if (!navigator.geolocation) {\n      toast({\n        title: \"Geolocation not supported\",\n        description: \"Please enter your address manually.\",\n        variant: \"destructive\",\n      });\n      setIsGettingLocation(false);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setFormData({\n          ...formData,\n          location: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          },\n        });\n        setIsGettingLocation(false);\n        toast({\n          title: \"Location detected\",\n          description: \"Your current location has been set.\",\n        });\n      },\n      (error) => {\n        console.error(\"Geolocation error:\", error);\n        toast({\n          title: \"Unable to get location\",\n          description: \"Please enter your address manually or check location permissions.\",\n          variant: \"destructive\",\n        });\n        setIsGettingLocation(false);\n      }\n    );\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.categoryId || !formData.title || !formData.description) {\n      toast({\n        title: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    onSubmit({\n      ...formData,\n      files: selectedFiles,\n      location: formData.location.lat !== 0 ? formData.location : undefined,\n    });\n  };\n\n  const categoryIcons: Record<string, string> = {\n    pothole: \"🛣️\",\n    streetlight: \"💡\",\n    garbage: \"🗑️\",\n    water: \"💧\",\n    electricity: \"⚡\",\n    traffic: \"🚦\",\n    parks: \"🌳\",\n    other: \"📝\",\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Issue Category */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"category\">Issue Category *</Label>\n        <Select value={formData.categoryId} onValueChange={(value) => \n          setFormData({ ...formData, categoryId: value })\n        }>\n          <SelectTrigger data-testid=\"select-category\">\n            <SelectValue placeholder=\"Select a category\" />\n          </SelectTrigger>\n          <SelectContent>\n            {categories.map((category: any) => (\n              <SelectItem key={category.id} value={category.id}>\n                <span className=\"flex items-center gap-2\">\n                  <span>{categoryIcons[category.code] || \"📝\"}</span>\n                  {category.name}\n                </span>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Issue Title */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"title\">Issue Title *</Label>\n        <Input\n          id=\"title\"\n          placeholder=\"Brief description of the issue\"\n          value={formData.title}\n          onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n          data-testid=\"input-title\"\n        />\n      </div>\n\n      {/* Detailed Description */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"description\">Detailed Description *</Label>\n        <Textarea\n          id=\"description\"\n          rows={4}\n          placeholder=\"Provide more details about the issue, when you noticed it, and how it affects you or others...\"\n          value={formData.description}\n          onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n          data-testid=\"textarea-description\"\n        />\n      </div>\n\n      {/* Location */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"address\">Location *</Label>\n        <div className=\"flex space-x-2\">\n          <Input\n            id=\"address\"\n            placeholder=\"Street address or landmark\"\n            value={formData.address}\n            onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n            className=\"flex-1\"\n            data-testid=\"input-address\"\n          />\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={getCurrentLocation}\n            disabled={isGettingLocation}\n            data-testid=\"button-get-location\"\n          >\n            <MapPin className=\"mr-2 h-4 w-4\" />\n            {isGettingLocation ? \"Getting...\" : \"Use GPS\"}\n          </Button>\n        </div>\n        {formData.location.lat !== 0 && (\n          <p className=\"text-xs text-muted-foreground\">\n            GPS: {formData.location.lat.toFixed(6)}, {formData.location.lng.toFixed(6)}\n          </p>\n        )}\n      </div>\n\n      {/* Photo Upload */}\n      <div className=\"space-y-2\">\n        <Label>Photos (Optional)</Label>\n        <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors\">\n          <Camera className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground mb-2\">Click to upload photos or drag and drop</p>\n          <p className=\"text-xs text-muted-foreground\">PNG, JPG up to 10MB each. Max 5 photos.</p>\n          <input\n            type=\"file\"\n            multiple\n            accept=\"image/*\"\n            onChange={handleFileChange}\n            className=\"hidden\"\n            id=\"file-upload\"\n            data-testid=\"input-file-upload\"\n          />\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            className=\"mt-4\"\n            onClick={() => document.getElementById('file-upload')?.click()}\n          >\n            Select Files\n          </Button>\n        </div>\n        \n        {selectedFiles.length > 0 && (\n          <div className=\"space-y-2\">\n            <p className=\"text-sm font-medium\">Selected files:</p>\n            {selectedFiles.map((file, index) => (\n              <div key={index} className=\"flex items-center justify-between p-2 border border-border rounded\">\n                <span className=\"text-sm\">{file.name}</span>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeFile(index)}\n                  data-testid={`button-remove-file-${index}`}\n                >\n                  Remove\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Priority Level */}\n      <div className=\"space-y-3\">\n        <Label>Priority Level</Label>\n        <RadioGroup\n          value={formData.priority}\n          onValueChange={(value) => setFormData({ ...formData, priority: value })}\n        >\n          <div className=\"grid grid-cols-3 gap-3\">\n            <Label className=\"flex items-center p-3 border border-border rounded-lg cursor-pointer hover:bg-accent\">\n              <RadioGroupItem value=\"LOW\" className=\"mr-3\" />\n              <div>\n                <div className=\"font-medium text-green-600\">Low</div>\n                <div className=\"text-xs text-muted-foreground\">Non-urgent</div>\n              </div>\n            </Label>\n            <Label className=\"flex items-center p-3 border border-border rounded-lg cursor-pointer hover:bg-accent\">\n              <RadioGroupItem value=\"MEDIUM\" className=\"mr-3\" />\n              <div>\n                <div className=\"font-medium text-orange-600\">Medium</div>\n                <div className=\"text-xs text-muted-foreground\">Standard</div>\n              </div>\n            </Label>\n            <Label className=\"flex items-center p-3 border border-border rounded-lg cursor-pointer hover:bg-accent\">\n              <RadioGroupItem value=\"HIGH\" className=\"mr-3\" />\n              <div>\n                <div className=\"font-medium text-red-600\">High</div>\n                <div className=\"text-xs text-muted-foreground\">Urgent</div>\n              </div>\n            </Label>\n          </div>\n        </RadioGroup>\n      </div>\n\n      <Button type=\"submit\" className=\"w-full btn-primary\" disabled={isSubmitting} data-testid=\"button-submit\">\n        {isSubmitting ? \"Submitting...\" : \"Submit Report\"}\n      </Button>\n    </form>\n  );\n}\n","size_bytes":9900},"client/src/components/issues/status-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { IssueStatus } from \"../../types\";\n\ninterface StatusBadgeProps {\n  status: IssueStatus;\n  className?: string;\n}\n\nexport default function StatusBadge({ status, className }: StatusBadgeProps) {\n  const getStatusConfig = (status: IssueStatus) => {\n    switch (status) {\n      case 'DRAFT':\n        return {\n          label: 'Draft',\n          className: 'status-draft bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400',\n        };\n      case 'SUBMITTED':\n        return {\n          label: 'Submitted',\n          className: 'status-submitted',\n        };\n      case 'TRIAGED':\n        return {\n          label: 'Triaged',\n          className: 'status-triaged',\n        };\n      case 'ASSIGNED':\n        return {\n          label: 'Assigned',\n          className: 'status-assigned',\n        };\n      case 'IN_PROGRESS':\n        return {\n          label: 'In Progress',\n          className: 'status-in-progress',\n        };\n      case 'PENDING_USER_INFO':\n        return {\n          label: 'Pending Info',\n          className: 'status-pending-user-info',\n        };\n      case 'RESOLVED':\n        return {\n          label: 'Resolved',\n          className: 'status-resolved',\n        };\n      case 'REJECTED':\n        return {\n          label: 'Rejected',\n          className: 'status-rejected',\n        };\n      default:\n        return {\n          label: status,\n          className: 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400',\n        };\n    }\n  };\n\n  const config = getStatusConfig(status);\n\n  return (\n    <Badge \n      className={cn(\"px-2 py-1 text-xs font-medium\", config.className, className)}\n      data-testid={`badge-status-${status.toLowerCase()}`}\n    >\n      {config.label}\n    </Badge>\n  );\n}\n","size_bytes":1827},"client/src/components/layout/header.tsx":{"content":"import { useAuth } from \"../../hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Building2, Bell, User, Menu } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport Navigation from \"./navigation\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function Header() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n\n  return (\n    <header className=\"bg-card border-b border-border shadow-sm sticky top-0 z-50\">\n      <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n              <Building2 className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-semibold text-primary\">CivicConnect</span>\n            </Link>\n            <div className=\"hidden md:block\">\n              <Navigation />\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-notifications\">\n              <Bell className=\"h-5 w-5\" />\n            </Button>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-user-menu\">\n                  <User className=\"h-5 w-5\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem disabled>\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-medium\">{user?.name}</span>\n                    <span className=\"text-xs text-muted-foreground\">{user?.email}</span>\n                  </div>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={logout} data-testid=\"menuitem-logout\">\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n}\n","size_bytes":2416},"client/src/components/layout/navigation.tsx":{"content":"import { useAuth } from \"../../hooks/use-auth\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Home, Plus, Search, Settings } from \"lucide-react\";\n\nexport default function Navigation() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const navItems = [\n    {\n      href: \"/\",\n      label: \"Home\",\n      icon: Home,\n      show: true,\n    },\n    {\n      href: \"/report\",\n      label: \"Report Issue\",\n      icon: Plus,\n      show: true,\n    },\n    {\n      href: \"/track\",\n      label: \"Track Issues\",\n      icon: Search,\n      show: true,\n    },\n    {\n      href: \"/admin\",\n      label: \"Admin\",\n      icon: Settings,\n      show: user?.role !== 'CITIZEN',\n    },\n  ];\n\n  return (\n    <nav className=\"flex space-x-6\">\n      {navItems\n        .filter(item => item.show)\n        .map((item) => {\n          const isActive = location === item.href;\n          return (\n            <Link key={item.href} href={item.href}>\n              <button\n                className={cn(\n                  \"flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                  isActive \n                    ? \"text-primary bg-primary/10\" \n                    : \"text-muted-foreground hover:text-primary hover:bg-accent\"\n                )}\n                data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <item.icon className=\"h-4 w-4\" />\n                <span>{item.label}</span>\n              </button>\n            </Link>\n          );\n        })}\n    </nav>\n  );\n}\n","size_bytes":1595},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/services/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport jwt from 'jsonwebtoken';\nimport { storage } from '../storage';\n\nexport interface AuthenticatedWebSocket extends WebSocket {\n  userId?: string;\n  userRole?: string;\n}\n\nclass WebSocketService {\n  private wss: WebSocketServer | null = null;\n  private clients = new Map<string, AuthenticatedWebSocket>();\n\n  init(server: Server) {\n    this.wss = new WebSocketServer({ \n      server,\n      path: '/ws'\n    });\n\n    this.wss.on('connection', this.handleConnection.bind(this));\n  }\n\n  private async handleConnection(ws: AuthenticatedWebSocket, request: any) {\n    try {\n      // Extract token from query string\n      const url = new URL(request.url!, `http://${request.headers.host}`);\n      const token = url.searchParams.get('token');\n\n      if (!token) {\n        ws.close(1008, 'Authentication required');\n        return;\n      }\n\n      // Verify JWT token\n      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key') as any;\n      const user = await storage.getUser(decoded.userId);\n\n      if (!user) {\n        ws.close(1008, 'Invalid user');\n        return;\n      }\n\n      ws.userId = user.id;\n      ws.userRole = user.role;\n      \n      // Store client connection\n      this.clients.set(user.id, ws);\n\n      // Send welcome message\n      this.sendToUser(user.id, {\n        type: 'connected',\n        message: 'Connected to real-time notifications'\n      });\n\n      // Handle client disconnect\n      ws.on('close', () => {\n        this.clients.delete(user.id);\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        this.clients.delete(user.id);\n      });\n\n    } catch (error) {\n      console.error('WebSocket authentication error:', error);\n      ws.close(1008, 'Authentication failed');\n    }\n  }\n\n  // Send notification to specific user\n  sendToUser(userId: string, data: any) {\n    const client = this.clients.get(userId);\n    if (client && client.readyState === WebSocket.OPEN) {\n      client.send(JSON.stringify(data));\n    }\n  }\n\n  // Send notification to all users with specific role\n  sendToRole(role: string, data: any) {\n    this.clients.forEach((client, userId) => {\n      if (client.userRole === role && client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(data));\n      }\n    });\n  }\n\n  // Send notification to all connected users\n  broadcast(data: any) {\n    this.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(data));\n      }\n    });\n  }\n\n  // Notify about new issue\n  notifyNewIssue(issue: any) {\n    // Notify all officers and supervisors\n    this.sendToRole('OFFICER', {\n      type: 'new_issue',\n      data: issue,\n      message: `New issue reported: ${issue.title}`\n    });\n\n    this.sendToRole('SUPERVISOR', {\n      type: 'new_issue', \n      data: issue,\n      message: `New issue reported: ${issue.title}`\n    });\n\n    this.sendToRole('ADMIN', {\n      type: 'new_issue',\n      data: issue,\n      message: `New issue reported: ${issue.title}`\n    });\n  }\n\n  // Notify about issue status update\n  notifyIssueUpdate(issue: any, oldStatus: string, newStatus: string) {\n    // Notify the reporter\n    this.sendToUser(issue.reporterId, {\n      type: 'issue_updated',\n      data: issue,\n      message: `Your issue \"${issue.title}\" status changed from ${oldStatus} to ${newStatus}`\n    });\n\n    // Notify assigned user if any\n    if (issue.assigneeId) {\n      this.sendToUser(issue.assigneeId, {\n        type: 'issue_assigned',\n        data: issue,\n        message: `Issue \"${issue.title}\" has been assigned to you`\n      });\n    }\n\n    // Notify supervisors and admins\n    this.sendToRole('SUPERVISOR', {\n      type: 'issue_status_change',\n      data: issue,\n      message: `Issue \"${issue.title}\" status changed to ${newStatus}`\n    });\n\n    this.sendToRole('ADMIN', {\n      type: 'issue_status_change',\n      data: issue,\n      message: `Issue \"${issue.title}\" status changed to ${newStatus}`\n    });\n  }\n\n  // Notify about issue assignment\n  notifyIssueAssignment(issue: any, assigneeId: string) {\n    this.sendToUser(assigneeId, {\n      type: 'issue_assigned',\n      data: issue,\n      message: `New issue \"${issue.title}\" has been assigned to you`\n    });\n\n    this.sendToUser(issue.reporterId, {\n      type: 'issue_assigned',\n      data: issue,\n      message: `Your issue \"${issue.title}\" has been assigned for resolution`\n    });\n  }\n}\n\nexport const webSocketService = new WebSocketService();","size_bytes":4561}},"version":1}